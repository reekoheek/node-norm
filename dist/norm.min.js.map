{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./schemas/nfield.js","webpack:///./filters/are.js","webpack:///./filters/default.js","webpack:///./filters/email.js","webpack:///./filters/enum.js","webpack:///./filters/exists.js","webpack:///./filters/notEmpty.js","webpack:///./filters/notExists.js","webpack:///./filters/required.js","webpack:///./filters/requiredIf.js","webpack:///./filters/unique.js","webpack:///./connection.js","webpack:///./filter.js","webpack:///./adapters/memory.js","webpack:///./node_modules/uuid/v4.js","webpack:///./node_modules/uuid/lib/rng-browser.js","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./filters sync ^\\.\\/.*$","webpack:///./node_modules/generic-pool/lib/Deferred.js","webpack:///./node_modules/generic-pool/lib/Deque.js","webpack:///./schemas/ndatetime.js","webpack:///./schemas/nstring.js","webpack:///./pool.js","webpack:///./node_modules/generic-pool/lib/DefaultEvictor.js","webpack:///./node_modules/generic-pool/lib/DoublyLinkedList.js","webpack:///./node_modules/generic-pool/lib/DequeIterator.js","webpack:///./node_modules/generic-pool/lib/PriorityQueue.js","webpack:///./schema.js","webpack:///./model.js","webpack:///./query.js","webpack:///./index.js","webpack:///./manager.js","webpack:///./node_modules/generic-pool/index.js","webpack:///./node_modules/generic-pool/lib/Pool.js","webpack:///./node_modules/events/events.js","webpack:///./node_modules/generic-pool/lib/factoryValidator.js","webpack:///./node_modules/generic-pool/lib/PoolOptions.js","webpack:///./node_modules/generic-pool/lib/PoolDefaults.js","webpack:///./node_modules/generic-pool/lib/ResourceRequest.js","webpack:///./node_modules/generic-pool/lib/errors.js","webpack:///./node_modules/generic-pool/lib/ResourceLoan.js","webpack:///./node_modules/generic-pool/lib/PooledResource.js","webpack:///./node_modules/generic-pool/lib/PooledResourceStateEnum.js","webpack:///./node_modules/generic-pool/lib/DoublyLinkedListIterator.js","webpack:///./node_modules/generic-pool/lib/Queue.js","webpack:///./node_modules/generic-pool/lib/utils.js","webpack:///./errors/filter.js","webpack:///./node_modules/koa-compose/index.js","webpack:///./session.js","webpack:///./node_modules/async-factory/index.js","webpack:///./schemas/index.js","webpack:///./schemas/nboolean.js","webpack:///./schemas/ndouble.js","webpack:///./schemas/ninteger.js","webpack:///./schemas/nreference.js","webpack:///./schemas/nlist.js","webpack:///./schemas/nmap.js","webpack:///./schemas/nenum.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Filter","[object Object]","this","rawFilters","filters","forEach","filter","tokenize","err","push","session","row","schema","trim","field","reduce","async","promise","Error","Array","isArray","schemaO","getSchema","Promise","all","map","attach","console","error","stack","defaultValue","toLowerCase","parts","split","length","domain","pop","user","join","replace","enums","indexOf","criteria","factory","single","foundRow","id","expected","_hasTx","_begin","_commit","_rollback","signature","head","rest","signatureType","fn","args","normalizedSignature","JSON","stringify","Connection","uuidv4","Memory","options","super","data","query","callback","sorts","find","_matchCriteria","sortFields","keys","sort","a","b","score","index","sortV","fieldScore","Math","pow","offset","slice","rows","inserted","assign","sets","load","affected","splice","useSkipAndLimit","count","critValue","nkey","op","rowValue","valid","subCriteria","re","RegExp","match","window","norm","adapters","rng","bytesToUuid","buf","rnds","random","ii","getRandomValues","crypto","msCrypto","rnds8","Uint8Array","byteToHex","toString","substr","bth","./are","./are.js","./default","./default.js","./email","./email.js","./enum","./enum.js","./exists","./exists.js","./notEmpty","./notEmpty.js","./notExists","./notExists.js","./required","./required.js","./requiredIf","./requiredIf.js","./unique","./unique.js","webpackContext","req","webpackContextResolve","e","code","resolve","Deferred","_state","PENDING","_resolve","undefined","_reject","_promise","reject","state","reason","REJECTED","FULFILLED","DoublyLinkedList","DequeIterator","_list","node","remove","element","createNode","insertBeginning","insertEnd","tail","iterator","NField","date","Date","isNaN","getTime","genericPool","Schema","poolNextId","config","adapter","schemas","min","max","colOptions","putSchema","Adapter","writable","configurable","createPool","fields","observers","modelClass","connection","_pool","acquire","release","clear","pooledResource","availableObjectsCount","idleTime","now","lastIdleTime","softIdleTimeoutMillis","idleTimeoutMillis","prev","next","insertBefore","insertAfter","newNode","DoublyLinkedListIterator","result","Queue","size","_size","_slots","_length","slots","obj","priority","sl","shift","FilterError","Model","compose","observer","addObserver","f","initialize","partial","ctx","_observerRunner","units","add","execFilter","empty","parseSchema","set","observe","_delete","delete","_save","insert","update","drop","truncate","limit","Manager","Pool","lib","Query","Session","ctr","connections","pools","main","putPool","pool","openSession","close","dispose","manager","Deque","PriorityQueue","DefaultEvictor","EventEmitter","factoryValidator","PoolOptions","ResourceRequest","ResourceLoan","PooledResource","reflector","FACTORY_CREATE_ERROR","FACTORY_DESTROY_ERROR","Evictor","_config","_Promise","_factory","_draining","_started","_waitingClientsQueue","priorityRange","_factoryCreateOperations","Set","_factoryDestroyOperations","_availableObjects","_testOnBorrowResources","_testOnReturnResources","_validationOperations","_allObjects","_resourceLoans","Map","_evictionIterator","_evictor","_scheduledEviction","autostart","start","invalidate","destroyPromise","destroy","wrappedDestroyPromise","_trackOperation","catch","emit","_ensureMinimum","test","validationPromise","validate","wrappedValidationPromise","then","isValid","_destroy","_dispense","_dispatchPooledResourceToNextWaitingClient","numWaitingClients","resourceShortfall","_potentiallyAllocableResourceCount","actualNumberOfResourcesToCreate","spareResourceCapacity","_createResource","testOnBorrow","desiredNumberOfResourcesToMoveIntoTest","actualNumberOfResourcesToMoveIntoTest","_testOnBorrow","actualNumberOfResourcesToDispatch","_dispatchResource","clientResourceRequest","dequeue","_addPooledResourceToAvailableObjects","loan","allocate","operation","v","factoryPromise","wrappedFactoryPromise","resource","_handleNewResource","minShortfall","_count","testsToRun","numTestsPerEvictionRun","evictionConfig","testsHaveRun","iterationResult","done","reset","shouldEvict","evict","evictionRunIntervalMillis","setTimeout","_evict","_scheduleEvictorRun","clearTimeout","maxWaitingClients","resourceRequest","acquireTimeoutMillis","enqueue","deallocate","idle","fifo","unshift","__allResourceRequestsSettled","__allResourcesReturned","_descheduleEvictorRun","ps","from","values","reflectedCreatePromises","reflectedDestroyPromises","available","borrowed","pending","_events","_maxListeners","isFunction","arg","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNumber","TypeError","type","er","handler","len","listeners","arguments","context","apply","addListener","listener","newListener","warned","trace","on","once","fired","g","removeListener","list","position","removeAllListeners","listenerCount","evlistener","emitter","PoolDefaults","opts","poolDefaults","testOnReturn","parseInt","errors","ttl","_creationTimestamp","_timeout","delay","age","removeTimeout","fbind","_fireTimeout","TimeoutError","ExtendableError","message","constructor","captureStackTrace","PooledResourceStateEnum","creationTime","lastReturnTime","lastBorrowTime","IDLE","ALLOCATED","INVALID","VALIDATION","RETURNING","doublyLinkedList","reverse","_direction","_startPosition","_cursor","_done","_isCursorDetached","_advanceCursor","_createTimeoutRejectionHandler","noop","status","children","child","middleware","dispatch","connectionFactory","sessionNextId","getPool","singleton","begin","rollback","commit","Space","locks","spaces","space","has","fetch","NBoolean","NDatetime","NDouble","NInteger","NReference","NString","NList","NMap","NEnum","Boolean","parseFloat","to","childField","parse","enumTo"],"mappings":"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","file":"norm.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","const Filter = require('../filter');\n\nclass NField {\n  constructor (name) {\n    this.name = name;\n    this.rawFilters = [];\n    this.filters = [];\n  }\n\n  filter (...filters) {\n    filters.forEach(filter => {\n      try {\n        filter = Filter.tokenize(filter);\n      } catch (err) {\n        // noop\n      }\n\n      this.rawFilters.push(filter);\n      this.filters.push(Filter.get(filter));\n    });\n\n    return this;\n  }\n\n  execFilter (value, { session, row, schema }) {\n    // when value is string, trim first before filtering\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    let field = this;\n    return this.filters.reduce(\n      async (promise, filter) => filter(await promise, { session, row, schema, field }),\n      value\n    );\n  }\n\n  attach (value) {\n    return value;\n  }\n}\n\nmodule.exports = NField;\n","module.exports = function (schema) {\n  return async function (value = null, { session, field: { name } }) {\n    if (value === null) {\n      return value;\n    }\n\n    let err = new Error(`Field ${name} values must be ${schema}`);\n\n    if (!Array.isArray(value)) {\n      throw err;\n    }\n\n    try {\n      let schemaO = session.getSchema(schema);\n      await Promise.all(value.map(row => schemaO.filter(row, { session })));\n      value = value.map(row => schemaO.attach(row));\n    } catch (err) {\n      console.error(`Caught error at nested model, ${err.stack}`);\n      throw new Error(`Field ${name} must be compatible to '${schema}'`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function def (defaultValue) {\n  return function (value = null) {\n    if (value === null) {\n      return defaultValue;\n    }\n\n    return value;\n  };\n};\n","module.exports = function email () {\n  return function (value = null, { field: { name } }) {\n    if (value === null) {\n      return value;\n    }\n\n    value = value.toLowerCase();\n\n    let err = new Error(`Field ${name} must be valid email`);\n\n    const parts = value.split('@');\n\n    if (parts.length !== 2) {\n      throw err;\n    }\n\n    const domain = parts.pop();\n    let user = parts.join('@');\n\n    if (domain === 'gmail.com' || domain === 'googlemail.com') {\n      user = user.replace(/\\./g, '').toLowerCase();\n    }\n\n    if (user.length > 64 || domain.length > 256) {\n      throw err;\n    }\n\n    return value;\n  };\n};\n","module.exports = function (...enums) {\n  return function (value = null, { field: { name } }) {\n    if (value === null) {\n      return value;\n    }\n\n    if (enums.indexOf(value) === -1) {\n      throw new Error(`Field ${name} out of enum range`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function exists (schema, key = 'id') {\n  return async function (value, { session, field: { name } }) {\n    if (!value) {\n      return;\n    }\n\n    let criteria = {};\n    criteria[key] = value;\n\n    if (!(await session.factory(schema, criteria).single())) {\n      throw new Error(`Field ${name} must be exists`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function notEmpty () {\n  return function (value, { field: { name } }) {\n    if (!value || (Array.isArray(value) && value.length)) {\n      throw new Error(`Field ${name} must not empty`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function notExists (schema) {\n  return async function (value, { row, session, field: { name } }) {\n    let criteria = { [name]: value };\n    let foundRow = await session.factory(schema, criteria).single();\n    if (foundRow && foundRow.id !== row.id) {\n      throw new Error(`Field ${name} already exists in ${schema}`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function required () {\n  return function (value = null, { field: { name = 'unknown' } }) {\n    if (value === null || value === '') {\n      throw new Error(`Field ${name} is required`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function requiredIf (key, expected) {\n  return function (value = null, { session, row, field: { name = 'unknown' } }) {\n    if (row[key] === expected && value === null) {\n      throw new Error(`Field ${name} is required`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function unique () {\n  return async function (value, { row, session, schema, field: { name } }) {\n    let criteria = { [name]: value };\n    let foundRow = await session.factory(schema.name, criteria).single();\n    if (foundRow && foundRow.id !== row.id) {\n      throw new Error(`Field ${name} must be unique`);\n    }\n\n    return value;\n  };\n};\n","class Connection {\n  constructor ({ name }) {\n    this.name = name;\n    this._hasTx = false;\n  }\n\n  async begin () {\n    if (this._hasTx) {\n      return;\n    }\n\n    await this._begin();\n\n    this._hasTx = true;\n  }\n\n  async commit () {\n    if (!this._hasTx) {\n      return;\n    }\n\n    await this._commit();\n    this._hasTx = false;\n  }\n\n  async rollback () {\n    if (!this._hasTx) {\n      return;\n    }\n\n    await this._rollback();\n    this._hasTx = false;\n  }\n\n  _begin () {\n    // do nothing\n  }\n\n  _commit () {\n    // do nothing\n  }\n\n  _rollback () {\n    // do nothing\n  }\n}\n\nmodule.exports = Connection;\n","let filters = {};\n\nclass Filter {\n  static tokenize (signature) {\n    if (typeof signature !== 'string') {\n      throw new Error('Cannot tokenize non-string filter signature');\n    }\n\n    let [ head, ...rest ] = signature.split(':');\n    rest = rest.join(':');\n    rest = rest.length === 0 ? [] : rest.split(',');\n\n    return [ head, ...rest ];\n  }\n\n  static get (signature) {\n    let signatureType = typeof signature;\n\n    if (signatureType === 'function') {\n      return signature;\n    }\n\n    if (signatureType === 'string') {\n      signature = Filter.tokenize(signature);\n    }\n\n    if (!Array.isArray(signature)) {\n      throw new Error(`Unknown filter by ${signatureType}`);\n    }\n\n    let [ fn, ...args ] = signature;\n\n    if (fn in filters === false) {\n      try {\n        filters[fn] = require('./filters/' + fn);\n      } catch (err) {\n        filters[fn] = null;\n      }\n    }\n\n    if (!filters[fn]) {\n      let normalizedSignature = 'unknown';\n      try {\n        normalizedSignature = JSON.stringify(signature);\n      } catch (err) {\n        // noop\n      }\n      throw new Error(`Filter ${fn} not found <${signatureType}(${normalizedSignature})>`);\n    }\n\n    return filters[fn](...args);\n  }\n\n  static put (name, filter) {\n    filters[name] = filter;\n  }\n\n  static reset () {\n    filters = {};\n  }\n}\n\nmodule.exports = Filter;\n","const Connection = require('../connection');\nconst uuidv4 = require('uuid/v4');\n\nclass Memory extends Connection {\n  constructor (options) {\n    super(options);\n\n    this.data = options.data || {};\n  }\n\n  load (query, callback = () => {}) {\n    let data = this.data[query.schema.name] || [];\n\n    let { criteria, sorts } = query;\n\n    if (criteria && typeof criteria.id !== 'undefined') {\n      const row = data.find(row => row.id === criteria.id);\n      data = row ? [ row ] : [];\n    } else {\n      data = data.filter(row => this._matchCriteria(criteria, row));\n\n      if (sorts) {\n        let sortFields = Object.keys(sorts);\n\n        data = data.sort((a, b) => {\n          let score = 0;\n          sortFields.forEach((field, index) => {\n            let sortV = sorts[field];\n            let fieldScore = Math.pow(2, sortFields.length - index - 1) * sortV;\n            if (a[field] < b[field]) {\n              score -= fieldScore;\n            } else if (a[field] > b[field]) {\n              score += fieldScore;\n            }\n          });\n          return score;\n        });\n      }\n\n      if (query.offset < 0) {\n        return data;\n      } else if (query.length < 0) {\n        data = data.slice(query.offset);\n      } else {\n        data = data.slice(query.offset, query.offset + query.length);\n      }\n    }\n\n    return data.map(row => {\n      callback(row);\n      return row;\n    });\n  }\n\n  insert (query, callback = () => {}) {\n    const data = this.data[query.schema.name] = this.data[query.schema.name] || [];\n\n    return query.rows.reduce((inserted, row) => {\n      row = Object.assign({ id: uuidv4() }, row);\n      data.push(row);\n      callback(row);\n      inserted++;\n      return inserted;\n    }, 0);\n  }\n\n  update (query) {\n    let keys = Object.keys(query.sets);\n    return this.load(query).reduce((affected, row) => {\n      let fieldChanges = keys.filter(key => {\n        if (row[key] === query.sets[key]) {\n          return false;\n        }\n\n        row[key] = query.sets[key];\n        return true;\n      });\n      if (fieldChanges.length) {\n        affected++;\n      }\n      return affected;\n    }, 0);\n  }\n\n  drop (query) {\n    delete this.data[query.schema.name];\n  }\n\n  truncate (query) {\n    this.data[query.schema.name] = [];\n  }\n\n  delete (query) {\n    const data = this.data[query.schema.name] = this.data[query.schema.name] || [];\n\n    this.load(query).forEach(row => {\n      const key = data.indexOf(row);\n      if (key >= 0) {\n        data.splice(key, 1);\n      }\n    });\n  }\n\n  async count (query, useSkipAndLimit) {\n    let { length, offset } = query;\n\n    if (!useSkipAndLimit) {\n      query.offset = 0;\n      query.length = -1;\n    }\n\n    let count = 0;\n\n    await this.load(query, () => count++);\n\n    query.offset = offset;\n    query.length = length;\n\n    return count;\n  }\n\n  _matchCriteria (criteria, row) {\n    if (!criteria) {\n      return true;\n    }\n\n    for (let key in criteria) {\n      let critValue = criteria[key];\n      let [ nkey, op = 'eq' ] = key.split('!');\n      let rowValue = row[nkey];\n      switch (op) {\n        case 'or': {\n          let valid = false;\n          for (let subCriteria of critValue) {\n            let match = this._matchCriteria(subCriteria, row);\n            if (match) {\n              valid = true;\n              break;\n            }\n          }\n          if (!valid) {\n            return false;\n          }\n          break;\n        }\n        case 'and':\n          for (let subCriteria of critValue) {\n            if (!this._matchCriteria(subCriteria, row)) {\n              return false;\n            }\n          }\n          break;\n        case 'eq':\n          if (critValue !== rowValue) {\n            return false;\n          }\n          break;\n        case 'ne':\n          if (critValue === rowValue) {\n            return false;\n          }\n          break;\n        case 'gt':\n          if (!(rowValue > critValue)) {\n            return false;\n          }\n          break;\n        case 'gte':\n          if (!(rowValue >= critValue)) {\n            return false;\n          }\n          break;\n        case 'lt':\n          if (!(rowValue < critValue)) {\n            return false;\n          }\n          break;\n        case 'lte':\n          if (!(rowValue <= critValue)) {\n            return false;\n          }\n          break;\n        case 'in':\n          if (critValue.indexOf(rowValue) === -1) {\n            return false;\n          }\n          break;\n        case 'nin':\n          if (critValue.indexOf(rowValue) !== -1) {\n            return false;\n          }\n          break;\n        case 'like': {\n          let re = new RegExp(critValue);\n          if (!rowValue.match(re)) {\n            return false;\n          }\n          break;\n        }\n        case 'regex':\n          if (!rowValue.match(critValue)) {\n            return false;\n          }\n          break;\n        case 'where':\n          if (!critValue(rowValue, row)) {\n            return false;\n          }\n          break;\n        default:\n          throw new Error(`Operator '${op}' is not implemented yet!`);\n      }\n    }\n\n    return true;\n  }\n}\n\nif (typeof window !== 'undefined') {\n  let norm = window.norm;\n  if (!norm) {\n    throw new Error('Norm is not defined yet!');\n  }\n\n  norm.adapters = norm.adapters || {};\n  norm.adapters.Memory = Memory;\n}\n\nmodule.exports = Memory;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var map = {\n\t\"./are\": 1,\n\t\"./are.js\": 1,\n\t\"./default\": 2,\n\t\"./default.js\": 2,\n\t\"./email\": 3,\n\t\"./email.js\": 3,\n\t\"./enum\": 4,\n\t\"./enum.js\": 4,\n\t\"./exists\": 5,\n\t\"./exists.js\": 5,\n\t\"./notEmpty\": 6,\n\t\"./notEmpty.js\": 6,\n\t\"./notExists\": 7,\n\t\"./notExists.js\": 7,\n\t\"./required\": 8,\n\t\"./required.js\": 8,\n\t\"./requiredIf\": 9,\n\t\"./requiredIf.js\": 9,\n\t\"./unique\": 10,\n\t\"./unique.js\": 10\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 17;","\"use strict\";\n\n/**\n * This is apparently a bit like a Jquery deferred, hence the name\n */\n\nclass Deferred {\n  constructor(Promise) {\n    this._state = Deferred.PENDING;\n    this._resolve = undefined;\n    this._reject = undefined;\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  reject(reason) {\n    if (this._state !== Deferred.PENDING) {\n      return;\n    }\n    this._state = Deferred.REJECTED;\n    this._reject(reason);\n  }\n\n  resolve(value) {\n    if (this._state !== Deferred.PENDING) {\n      return;\n    }\n    this._state = Deferred.FULFILLED;\n    this._resolve(value);\n  }\n}\n\n// TODO: should these really live here? or be a seperate 'state' enum\nDeferred.PENDING = \"PENDING\";\nDeferred.FULFILLED = \"FULFILLED\";\nDeferred.REJECTED = \"REJECTED\";\n\nmodule.exports = Deferred;\n","\"use strict\";\n\nconst DoublyLinkedList = require(\"./DoublyLinkedList\");\nconst DequeIterator = require(\"./DequeIterator\");\n/**\n * DoublyLinkedList backed double ended queue\n * implements just enough to keep the Pool\n */\nclass Deque {\n  constructor() {\n    this._list = new DoublyLinkedList();\n  }\n\n  /**\n   * removes and returns the first element from the queue\n   * @return {any} [description]\n   */\n  shift() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.head;\n    this._list.remove(node);\n\n    return node.data;\n  }\n\n  /**\n   * adds one elemts to the beginning of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n  unshift(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertBeginning(node);\n  }\n\n  /**\n   * adds one to the end of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n  push(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertEnd(node);\n  }\n\n  /**\n   * removes and returns the last element from the queue\n   */\n  pop() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.tail;\n    this._list.remove(node);\n\n    return node.data;\n  }\n\n  [Symbol.iterator]() {\n    return new DequeIterator(this._list);\n  }\n\n  iterator() {\n    return new DequeIterator(this._list);\n  }\n\n  reverseIterator() {\n    return new DequeIterator(this._list, true);\n  }\n\n  /**\n   * get a reference to the item at the head of the queue\n   * @return {any} [description]\n   */\n  get head() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    const node = this._list.head;\n    return node.data;\n  }\n\n  /**\n   * get a reference to the item at the tail of the queue\n   * @return {any} [description]\n   */\n  get tail() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    const node = this._list.tail;\n    return node.data;\n  }\n\n  get length() {\n    return this._list.length;\n  }\n}\n\nmodule.exports = Deque;\n","const NField = require('./nfield');\n\nmodule.exports = class NDatetime extends NField {\n  attach (value) {\n    let date = new Date(value);\n    if (!isNaN(date.getTime())) {\n      return date;\n    }\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NString extends NField {\n\n};\n","const genericPool = require('generic-pool');\nconst Schema = require('./schema');\n\nlet poolNextId = 0;\n\nclass Pool {\n  constructor (config) {\n    let { name, adapter = require('./adapters/memory'), schemas = [], min = 1, max = 1 } = config;\n\n    this.name = name || `pool-${poolNextId++}`;\n    this.schemas = {};\n\n    schemas.forEach(colOptions => this.putSchema(colOptions));\n\n    const Adapter = adapter;\n\n    Object.defineProperty(this, '_pool', {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: genericPool.createPool({\n        create () {\n          return new Adapter(config);\n        },\n        destroy () {\n          // noop\n        },\n      }, { min, max }),\n    });\n  }\n\n  putSchema ({ name, fields, observers, modelClass }) {\n    let connection = this.name;\n    this.schemas[name] = new Schema({ connection, name, fields, observers, modelClass });\n    return this;\n  }\n\n  /**\n   * Getter schema\n   *\n   * @param {string} name\n   */\n  getSchema (name) {\n    if (!this.schemas[name]) {\n      this.putSchema({ name });\n    }\n    return this.schemas[name];\n  }\n\n  acquire (...args) {\n    return this._pool.acquire(...args);\n  }\n\n  release (...args) {\n    return this._pool.release(...args);\n  }\n\n  drain (...args) {\n    return this._pool.acquire(...args);\n  }\n\n  clear (...args) {\n    return this._pool.clear(...args);\n  }\n}\n\nmodule.exports = Pool;\n","\"use strict\";\n\nclass DefaultEvictor {\n  evict(config, pooledResource, availableObjectsCount) {\n    const idleTime = Date.now() - pooledResource.lastIdleTime;\n\n    if (\n      config.softIdleTimeoutMillis < idleTime &&\n      config.min < availableObjectsCount\n    ) {\n      return true;\n    }\n\n    if (config.idleTimeoutMillis < idleTime) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = DefaultEvictor;\n","\"use strict\";\n\n/**\n * A Doubly Linked List, because there aren't enough in the world...\n * this is pretty much a direct JS port of the one wikipedia\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n *\n * For most usage 'insertBeginning' and 'insertEnd' should be enough\n *\n * nodes are expected to something like a POJSO like\n * {\n *   prev: null,\n *   next: null,\n *   something: 'whatever you like'\n * }\n */\nclass DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  insertBeginning(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.length++;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n  }\n\n  insertEnd(node) {\n    if (this.tail === null) {\n      this.insertBeginning(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n  }\n\n  insertAfter(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.length++;\n  }\n\n  insertBefore(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.length++;\n  }\n\n  remove(node) {\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    node.prev = null;\n    node.next = null;\n    this.length--;\n  }\n\n  // FIXME: this should not live here and has become a dumping ground...\n  static createNode(data) {\n    return {\n      prev: null,\n      next: null,\n      data: data\n    };\n  }\n}\n\nmodule.exports = DoublyLinkedList;\n","\"use strict\";\n\nconst DoublyLinkedListIterator = require(\"./DoublyLinkedListIterator\");\n/**\n * Thin wrapper around an underlying DDL iterator\n */\nclass DequeIterator extends DoublyLinkedListIterator {\n  next() {\n    const result = super.next();\n\n    // unwrap the node...\n    if (result.value) {\n      result.value = result.value.data;\n    }\n\n    return result;\n  }\n}\n\nmodule.exports = DequeIterator;\n","\"use strict\";\n\nconst Queue = require(\"./Queue\");\n\n/**\n * @class\n * @private\n */\nclass PriorityQueue {\n  constructor(size) {\n    this._size = Math.max(+size | 0, 1);\n    /** @type {Queue[]} */\n    this._slots = [];\n    // initialize arrays to hold queue elements\n    for (let i = 0; i < this._size; i++) {\n      this._slots.push(new Queue());\n    }\n  }\n\n  get length() {\n    let _length = 0;\n    for (let i = 0, slots = this._slots.length; i < slots; i++) {\n      _length += this._slots[i].length;\n    }\n    return _length;\n  }\n\n  enqueue(obj, priority) {\n    // Convert to integer with a default value of 0.\n    priority = (priority && +priority | 0) || 0;\n\n    if (priority) {\n      if (priority < 0 || priority >= this._size) {\n        priority = this._size - 1;\n        // put obj at the end of the line\n      }\n    }\n    this._slots[priority].push(obj);\n  }\n\n  dequeue() {\n    for (let i = 0, sl = this._slots.length; i < sl; i += 1) {\n      if (this._slots[i].length) {\n        return this._slots[i].shift();\n      }\n    }\n    return;\n  }\n\n  get head() {\n    for (let i = 0, sl = this._slots.length; i < sl; i += 1) {\n      if (this._slots[i].length > 0) {\n        return this._slots[i].head;\n      }\n    }\n    return;\n  }\n\n  get tail() {\n    for (let i = this._slots.length - 1; i >= 0; i--) {\n      if (this._slots[i].length > 0) {\n        return this._slots[i].tail;\n      }\n    }\n    return;\n  }\n}\n\nmodule.exports = PriorityQueue;\n","const FilterError = require('./errors/filter');\nconst Model = require('./model');\nconst compose = require('koa-compose');\n\nclass Schema {\n  constructor ({ name, fields = [], observers = [], modelClass = Model }) {\n    if (!name) {\n      throw new Error('Schema name is required');\n    }\n\n    this.name = name;\n    this.fields = fields;\n    this.observers = [];\n    this.modelClass = modelClass;\n\n    observers.forEach(observer => this.addObserver(observer));\n  }\n\n  addField (field) {\n    let existingField = this.fields.find(f => f.name === field.name);\n    if (existingField) {\n      return;\n    }\n\n    this.fields.push(field);\n  }\n\n  addObserver (observer) {\n    if ('initialize' in observer) {\n      observer.initialize(this);\n    }\n    this.observers.push(observer);\n  }\n\n  attach (row, partial = false) {\n    let Model = this.modelClass;\n\n    this.fields.forEach(field => {\n      switch (row[field.name]) {\n        case undefined:\n          if (!partial) {\n            row[field.name] = null;\n          }\n          break;\n        case null:\n          row[field.name] = null;\n          break;\n        default:\n          row[field.name] = field.attach(row[field.name]);\n      }\n    });\n\n    return new Model(row);\n  }\n\n  observe (ctx, next) {\n    if (!this._observerRunner) {\n      let units = this.observers.map(observer => {\n        return (ctx, next) => {\n          if (typeof observer[ctx.query.mode] !== 'function') {\n            return next();\n          }\n          return observer[ctx.query.mode](ctx, next);\n        };\n      });\n\n      this._observerRunner = compose(units);\n    }\n\n    return this._observerRunner(ctx, next);\n  }\n\n  async filter (row, { session, partial = false }) {\n    const error = new FilterError();\n\n    if (!row) {\n      error.add(new Error('Cannot filter empty row'));\n      throw error;\n    }\n\n    await Promise.all(this.fields.map(async field => {\n      try {\n        if (partial && row[field.name] === undefined) {\n          return;\n        }\n\n        row[field.name] = await field.execFilter(row[field.name], { session, row, schema: this });\n      } catch (err) {\n        err.field = field;\n        error.add(err);\n      }\n    }));\n\n    if (!error.empty()) {\n      throw error;\n    }\n\n    return row;\n  }\n}\n\nmodule.exports = Schema;\n","class Model {\n  constructor (row) {\n    for (let key in row) {\n      if (!row.hasOwnProperty(key) || row[key] === undefined) {\n        continue;\n      }\n\n      this[key] = row[key];\n    }\n  }\n}\n\nmodule.exports = Model;\n","class Query {\n  constructor ({ session, schema, criteria }) {\n    this.session = session;\n\n    [ this.connection, this.schema ] = this.session.parseSchema(schema);\n\n    this.find(criteria);\n\n    this.rows = [];\n    this.sets = {};\n    this.length = -1;\n    this.offset = 0;\n    this.sorts = undefined;\n  }\n\n  find (criteria = {}) {\n    this.criteria = typeof criteria === 'object' ? criteria : { id: criteria };\n\n    return this;\n  }\n\n  insert (row) {\n    this.mode = 'insert';\n    this.rows.push(this.schema.attach(row));\n\n    return this;\n  }\n\n  sort (sorts) {\n    this.sorts = sorts;\n\n    return this;\n  }\n\n  limit (length) {\n    this.length = length;\n\n    return this;\n  }\n\n  skip (offset) {\n    this.offset = offset;\n\n    return this;\n  }\n\n  set (set) {\n    this.mode = 'update';\n    this.sets = this.schema.attach(set, true);\n\n    return this;\n  }\n\n  async delete ({ observer = true } = {}) {\n    this.mode = 'delete';\n\n    let ctx = { query: this };\n\n    if (observer) {\n      await this.schema.observe(ctx, ctx => this._delete(ctx));\n    } else {\n      await this._delete(ctx);\n    }\n\n    return ctx.result;\n  }\n\n  async _delete () {\n    const connection = await this.session.acquire(this.connection);\n    let result = await connection.delete(this);\n    return result;\n  }\n\n  async save ({ filter = true, observer = true } = {}) {\n    let ctx = { query: this, filter };\n\n    if (observer) {\n      await this.schema.observe(ctx, ctx => this._save(ctx));\n    } else {\n      await this._save(ctx);\n    }\n\n    return this;\n  }\n\n  async _save (ctx) {\n    const connection = await this.session.acquire(this.connection);\n    let { session } = this;\n    let { filter } = ctx;\n\n    if (this.rows.length) {\n      if (filter) {\n        await Promise.all(this.rows.map(row => this.schema.filter(row, { session })));\n      }\n\n      let rows = [];\n      this.affected = await connection.insert(this, row => rows.push(this.schema.attach(row)));\n      this.rows = rows;\n    } else {\n      if (filter) {\n        let partial = true;\n        await this.schema.filter(this.sets, { session, partial });\n      }\n\n      this.affected = await connection.update(this);\n    }\n  }\n\n  async drop () {\n    const connection = await this.session.acquire(this.connection);\n    let result = await connection.drop(this);\n    return result;\n  }\n\n  async truncate () {\n    const connection = await this.session.acquire(this.connection);\n    let result = await connection.truncate(this);\n    return result;\n  }\n\n  async all () {\n    let rows = [];\n    const connection = await this.session.acquire(this.connection);\n    await connection.load(this, row => rows.push(this.schema.attach(row)));\n    return rows;\n  }\n\n  async count (useSkipAndLimit = false) {\n    const connection = await this.session.acquire(this.connection);\n    if (typeof connection.count !== 'function') {\n      throw new Error('Connection does not implement method count');\n    }\n    return connection.count(this, useSkipAndLimit);\n  }\n\n  async single () {\n    let [ row ] = await this.limit(1).all();\n    return row;\n  }\n\n  getInsertedRows () {\n    return this.rows;\n  }\n}\n\nmodule.exports = Query;\n","const Manager = require('./manager');\nconst Filter = require('./filter');\nconst Connection = require('./connection');\nconst Pool = require('./pool');\nconst Model = require('./model');\nconst Schema = require('./schema');\nconst schemas = require('./schemas');\nconst Query = require('./query');\n\nconst lib = {\n  Manager,\n  Connection,\n  Model,\n  Pool,\n  Query,\n  Filter,\n  Schema,\n  schemas,\n};\n\nif (typeof window !== 'undefined') {\n  window.norm = lib;\n}\n\nmodule.exports = lib;\n","const Pool = require('./pool');\nconst Session = require('./session');\n\nclass Manager {\n  static adapter (ctr) {\n    if (typeof ctr === 'function') {\n      return ctr;\n    }\n\n    throw new Error('Adapter must be a constructor');\n  }\n\n  constructor ({ connections = [] } = {}) {\n    this.pools = {};\n    this.main = '';\n\n    connections.forEach(connection => this.putPool(connection));\n  }\n\n  putPool (config) {\n    // resolve adapter first before creating\n    config.adapter = Manager.adapter(config.adapter);\n\n    let pool = new Pool(config);\n    this.pools[pool.name] = pool;\n    this.main = config.main ? pool.name : (this.main || pool.name);\n\n    return this;\n  }\n\n  /**\n   * Getter pool\n   *\n   * @param {string} name\n   * @returns {Pool}\n   */\n  getPool (name) {\n    if (this.main === '') {\n      this.putPool({});\n    }\n\n    name = `${name || this.main}`;\n    if (!this.pools[name]) {\n      throw new Error(`Pool '${name}' not found`);\n    }\n\n    return this.pools[name];\n  }\n\n  async runSession (fn, options) {\n    const session = this.openSession(options);\n    try {\n      const result = await fn(session);\n      await session.close();\n      await session.dispose();\n      return result;\n    } catch (err) {\n      await session.dispose();\n      throw err;\n    }\n  }\n\n  openSession (options) {\n    return new Session({ manager: this });\n  }\n}\n\nmodule.exports = Manager;\n","const Pool = require(\"./lib/Pool\");\nconst Deque = require(\"./lib/Deque\");\nconst PriorityQueue = require(\"./lib/PriorityQueue\");\nconst DefaultEvictor = require(\"./lib/DefaultEvictor\");\nmodule.exports = {\n  Pool: Pool,\n  Deque: Deque,\n  PriorityQueue: PriorityQueue,\n  DefaultEvictor: DefaultEvictor,\n  createPool: function(factory, config) {\n    return new Pool(DefaultEvictor, Deque, PriorityQueue, factory, config);\n  }\n};\n","\"use strict\";\n\nconst EventEmitter = require(\"events\").EventEmitter;\n\nconst factoryValidator = require(\"./factoryValidator\");\nconst PoolOptions = require(\"./PoolOptions\");\nconst ResourceRequest = require(\"./ResourceRequest\");\nconst ResourceLoan = require(\"./ResourceLoan\");\nconst PooledResource = require(\"./PooledResource\");\nconst DefaultEvictor = require(\"./DefaultEvictor\");\nconst Deque = require(\"./Deque\");\nconst Deferred = require(\"./Deferred\");\nconst PriorityQueue = require(\"./PriorityQueue\");\nconst DequeIterator = require(\"./DequeIterator\");\n\nconst reflector = require(\"./utils\").reflector;\n\n/**\n * TODO: move me\n */\nconst FACTORY_CREATE_ERROR = \"factoryCreateError\";\nconst FACTORY_DESTROY_ERROR = \"factoryDestroyError\";\n\nclass Pool extends EventEmitter {\n  /**\n   * Generate an Object pool with a specified `factory` and `config`.\n   *\n   * @param {typeof DefaultEvictor} Evictor\n   * @param {typeof Deque} Deque\n   * @param {typeof PriorityQueue} PriorityQueue\n   * @param {Object} factory\n   *   Factory to be used for generating and destroying the items.\n   * @param {Function} factory.create\n   *   Should create the item to be acquired,\n   *   and call it's first callback argument with the generated item as it's argument.\n   * @param {Function} factory.destroy\n   *   Should gently close any resources that the item is using.\n   *   Called before the items is destroyed.\n   * @param {Function} factory.validate\n   *   Test if a resource is still valid .Should return a promise that resolves to a boolean, true if resource is still valid and false\n   *   If it should be removed from pool.\n   * @param {Object} options\n   */\n  constructor(Evictor, Deque, PriorityQueue, factory, options) {\n    super();\n\n    factoryValidator(factory);\n\n    this._config = new PoolOptions(options);\n\n    // TODO: fix up this ugly glue-ing\n    this._Promise = this._config.Promise;\n\n    this._factory = factory;\n    this._draining = false;\n    this._started = false;\n    /**\n     * Holds waiting clients\n     * @type {PriorityQueue}\n     */\n    this._waitingClientsQueue = new PriorityQueue(this._config.priorityRange);\n\n    /**\n     * Collection of promises for resource creation calls made by the pool to factory.create\n     * @type {Set}\n     */\n    this._factoryCreateOperations = new Set();\n\n    /**\n     * Collection of promises for resource destruction calls made by the pool to factory.destroy\n     * @type {Set}\n     */\n    this._factoryDestroyOperations = new Set();\n\n    /**\n     * A queue/stack of pooledResources awaiting acquisition\n     * TODO: replace with LinkedList backed array\n     * @type {Deque}\n     */\n    this._availableObjects = new Deque();\n\n    /**\n     * Collection of references for any resource that are undergoing validation before being acquired\n     * @type {Set}\n     */\n    this._testOnBorrowResources = new Set();\n\n    /**\n     * Collection of references for any resource that are undergoing validation before being returned\n     * @type {Set}\n     */\n    this._testOnReturnResources = new Set();\n\n    /**\n     * Collection of promises for any validations currently in process\n     * @type {Set}\n     */\n    this._validationOperations = new Set();\n\n    /**\n     * All objects associated with this pool in any state (except destroyed)\n     * @type {Set}\n     */\n    this._allObjects = new Set();\n\n    /**\n     * Loans keyed by the borrowed resource\n     * @type {Map}\n     */\n    this._resourceLoans = new Map();\n\n    /**\n     * Infinitely looping iterator over available object\n     * @type {DequeIterator}\n     */\n    this._evictionIterator = this._availableObjects.iterator();\n\n    this._evictor = new Evictor();\n\n    /**\n     * handle for setTimeout for next eviction run\n     * @type {(number|null)}\n     */\n    this._scheduledEviction = null;\n\n    // create initial resources (if factory.min > 0)\n    if (this._config.autostart === true) {\n      this.start();\n    }\n  }\n\n  _destroy(pooledResource) {\n    // FIXME: do we need another state for \"in destruction\"?\n    pooledResource.invalidate();\n    this._allObjects.delete(pooledResource);\n    // NOTE: this maybe very bad promise usage?\n    const destroyPromise = this._factory.destroy(pooledResource.obj);\n    const wrappedDestroyPromise = this._Promise.resolve(destroyPromise);\n\n    this._trackOperation(\n      wrappedDestroyPromise,\n      this._factoryDestroyOperations\n    ).catch(reason => {\n      this.emit(FACTORY_DESTROY_ERROR, reason);\n    });\n\n    // TODO: maybe ensuring minimum pool size should live outside here\n    this._ensureMinimum();\n  }\n\n  /**\n   * Attempt to move an available resource into test and then onto a waiting client\n   * @return {Boolean} could we move an available resource into test\n   */\n  _testOnBorrow() {\n    if (this._availableObjects.length < 1) {\n      return false;\n    }\n\n    const pooledResource = this._availableObjects.shift();\n    // Mark the resource as in test\n    pooledResource.test();\n    this._testOnBorrowResources.add(pooledResource);\n    const validationPromise = this._factory.validate(pooledResource.obj);\n    const wrappedValidationPromise = this._Promise.resolve(validationPromise);\n\n    this._trackOperation(\n      wrappedValidationPromise,\n      this._validationOperations\n    ).then(isValid => {\n      this._testOnBorrowResources.delete(pooledResource);\n\n      if (isValid === false) {\n        pooledResource.invalidate();\n        this._destroy(pooledResource);\n        this._dispense();\n        return;\n      }\n      this._dispatchPooledResourceToNextWaitingClient(pooledResource);\n    });\n\n    return true;\n  }\n\n  /**\n   * Attempt to move an available resource to a waiting client\n   * @return {Boolean} [description]\n   */\n  _dispatchResource() {\n    if (this._availableObjects.length < 1) {\n      return false;\n    }\n\n    const pooledResource = this._availableObjects.shift();\n    this._dispatchPooledResourceToNextWaitingClient(pooledResource);\n    return false;\n  }\n\n  /**\n   * Attempt to resolve an outstanding resource request using an available resource from\n   * the pool, or creating new ones\n   *\n   * @private\n   */\n  _dispense() {\n    /**\n     * Local variables for ease of reading/writing\n     * these don't (shouldn't) change across the execution of this fn\n     */\n    const numWaitingClients = this._waitingClientsQueue.length;\n\n    // If there aren't any waiting requests then there is nothing to do\n    // so lets short-circuit\n    if (numWaitingClients < 1) {\n      return;\n    }\n\n    const resourceShortfall =\n      numWaitingClients - this._potentiallyAllocableResourceCount;\n\n    const actualNumberOfResourcesToCreate = Math.min(\n      this.spareResourceCapacity,\n      resourceShortfall\n    );\n    for (let i = 0; actualNumberOfResourcesToCreate > i; i++) {\n      this._createResource();\n    }\n\n    // If we are doing test-on-borrow see how many more resources need to be moved into test\n    // to help satisfy waitingClients\n    if (this._config.testOnBorrow === true) {\n      // how many available resources do we need to shift into test\n      const desiredNumberOfResourcesToMoveIntoTest =\n        numWaitingClients - this._testOnBorrowResources.size;\n      const actualNumberOfResourcesToMoveIntoTest = Math.min(\n        this._availableObjects.length,\n        desiredNumberOfResourcesToMoveIntoTest\n      );\n      for (let i = 0; actualNumberOfResourcesToMoveIntoTest > i; i++) {\n        this._testOnBorrow();\n      }\n    }\n\n    // if we aren't testing-on-borrow then lets try to allocate what we can\n    if (this._config.testOnBorrow === false) {\n      const actualNumberOfResourcesToDispatch = Math.min(\n        this._availableObjects.length,\n        numWaitingClients\n      );\n      for (let i = 0; actualNumberOfResourcesToDispatch > i; i++) {\n        this._dispatchResource();\n      }\n    }\n  }\n\n  /**\n   * Dispatches a pooledResource to the next waiting client (if any) else\n   * puts the PooledResource back on the available list\n   * @param  {PooledResource} pooledResource [description]\n   * @return {Boolean}                [description]\n   */\n  _dispatchPooledResourceToNextWaitingClient(pooledResource) {\n    const clientResourceRequest = this._waitingClientsQueue.dequeue();\n    if (\n      clientResourceRequest === undefined ||\n      clientResourceRequest.state !== Deferred.PENDING\n    ) {\n      // While we were away either all the waiting clients timed out\n      // or were somehow fulfilled. put our pooledResource back.\n      this._addPooledResourceToAvailableObjects(pooledResource);\n      // TODO: do need to trigger anything before we leave?\n      return false;\n    }\n    const loan = new ResourceLoan(pooledResource, this._Promise);\n    this._resourceLoans.set(pooledResource.obj, loan);\n    pooledResource.allocate();\n    clientResourceRequest.resolve(pooledResource.obj);\n    return true;\n  }\n\n  /**\n   * tracks on operation using given set\n   * handles adding/removing from the set and resolve/rejects the value/reason\n   * @param  {Promise} operation\n   * @param  {Set} set       Set holding operations\n   * @return {Promise}       Promise that resolves once operation has been removed from set\n   */\n  _trackOperation(operation, set) {\n    set.add(operation);\n\n    return operation.then(\n      v => {\n        set.delete(operation);\n        return this._Promise.resolve(v);\n      },\n      e => {\n        set.delete(operation);\n        return this._Promise.reject(e);\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createResource() {\n    // An attempt to create a resource\n    const factoryPromise = this._factory.create();\n    const wrappedFactoryPromise = this._Promise.resolve(factoryPromise);\n\n    this._trackOperation(wrappedFactoryPromise, this._factoryCreateOperations)\n      .then(resource => {\n        this._handleNewResource(resource);\n        return null;\n      })\n      .catch(reason => {\n        this.emit(FACTORY_CREATE_ERROR, reason);\n        this._dispense();\n      });\n  }\n\n  _handleNewResource(resource) {\n    const pooledResource = new PooledResource(resource);\n    this._allObjects.add(pooledResource);\n    // TODO: check we aren't exceding our maxPoolSize before doing\n    this._dispatchPooledResourceToNextWaitingClient(pooledResource);\n  }\n\n  /**\n   * @private\n   */\n  _ensureMinimum() {\n    if (this._draining === true) {\n      return;\n    }\n    const minShortfall = this._config.min - this._count;\n    for (let i = 0; i < minShortfall; i++) {\n      this._createResource();\n    }\n  }\n\n  _evict() {\n    const testsToRun = Math.min(\n      this._config.numTestsPerEvictionRun,\n      this._availableObjects.length\n    );\n    const evictionConfig = {\n      softIdleTimeoutMillis: this._config.softIdleTimeoutMillis,\n      idleTimeoutMillis: this._config.idleTimeoutMillis,\n      min: this._config.min\n    };\n    for (let testsHaveRun = 0; testsHaveRun < testsToRun; ) {\n      const iterationResult = this._evictionIterator.next();\n\n      // Safety check incase we could get stuck in infinite loop because we\n      // somehow emptied the array after chekcing it's length\n      if (iterationResult.done === true && this._availableObjects.length < 1) {\n        this._evictionIterator.reset();\n        return;\n      }\n      // if this happens it should just mean we reached the end of the\n      // list and can reset the cursor.\n      if (iterationResult.done === true && this._availableObjects.length > 0) {\n        this._evictionIterator.reset();\n        break;\n      }\n\n      const resource = iterationResult.value;\n\n      const shouldEvict = this._evictor.evict(\n        evictionConfig,\n        resource,\n        this._availableObjects.length\n      );\n      testsHaveRun++;\n\n      if (shouldEvict === true) {\n        // take it out of the _availableObjects list\n        this._evictionIterator.remove();\n        this._destroy(resource);\n      }\n    }\n  }\n\n  _scheduleEvictorRun() {\n    // Start eviction if set\n    if (this._config.evictionRunIntervalMillis > 0) {\n      // @ts-ignore\n      this._scheduledEviction = setTimeout(() => {\n        this._evict();\n        this._scheduleEvictorRun();\n      }, this._config.evictionRunIntervalMillis);\n    }\n  }\n\n  _descheduleEvictorRun() {\n    if (this._scheduledEviction) {\n      clearTimeout(this._scheduledEviction);\n    }\n    this._scheduledEviction = null;\n  }\n\n  start() {\n    if (this._draining === true) {\n      return;\n    }\n    if (this._started === true) {\n      return;\n    }\n    this._started = true;\n    this._scheduleEvictorRun();\n    this._ensureMinimum();\n  }\n\n  /**\n   * Request a new resource. The callback will be called,\n   * when a new resource is available, passing the resource to the callback.\n   * TODO: should we add a seperate \"acquireWithPriority\" function\n   *\n   * @param {Number} [priority=0]\n   *   Optional.  Integer between 0 and (priorityRange - 1).  Specifies the priority\n   *   of the caller if there are no available resources.  Lower numbers mean higher\n   *   priority.\n   *\n   * @returns {Promise}\n   */\n  acquire(priority) {\n    if (this._started === false && this._config.autostart === false) {\n      this.start();\n    }\n\n    if (this._draining) {\n      return this._Promise.reject(\n        new Error(\"pool is draining and cannot accept work\")\n      );\n    }\n\n    // TODO: should we defer this check till after this event loop incase \"the situation\" changes in the meantime\n    if (\n      this._config.maxWaitingClients !== undefined &&\n      this._waitingClientsQueue.length >= this._config.maxWaitingClients\n    ) {\n      return this._Promise.reject(\n        new Error(\"max waitingClients count exceeded\")\n      );\n    }\n\n    const resourceRequest = new ResourceRequest(\n      this._config.acquireTimeoutMillis,\n      this._Promise\n    );\n    this._waitingClientsQueue.enqueue(resourceRequest, priority);\n    this._dispense();\n\n    return resourceRequest.promise;\n  }\n\n  /**\n   * [use method, aquires a resource, passes the resource to a user supplied function and releases it]\n   * @param  {Function} fn [a function that accepts a resource and returns a promise that resolves/rejects once it has finished using the resource]\n   * @return {Promise}      [resolves once the resource is released to the pool]\n   */\n  use(fn) {\n    return this.acquire().then(resource => {\n      return fn(resource).then(\n        result => {\n          this.release(resource);\n          return result;\n        },\n        err => {\n          this.release(resource);\n          throw err;\n        }\n      );\n    });\n  }\n\n  /**\n   * Check if resource is currently on loan from the pool\n   *\n   * @param {Function} resource\n   *    Resource for checking.\n   *\n   * @returns {Boolean}\n   *  True if resource belongs to this pool and false otherwise\n   */\n  isBorrowedResource(resource) {\n    return this._resourceLoans.get(resource) !== undefined;\n  }\n\n  /**\n   * Return the resource to the pool when it is no longer required.\n   *\n   * @param {Object} resource\n   *   The acquired object to be put back to the pool.\n   */\n  release(resource) {\n    // check for an outstanding loan\n    const loan = this._resourceLoans.get(resource);\n\n    if (loan === undefined) {\n      return this._Promise.reject(\n        new Error(\"Resource not currently part of this pool\")\n      );\n    }\n\n    this._resourceLoans.delete(resource);\n    loan.resolve();\n    const pooledResource = loan.pooledResource;\n\n    pooledResource.deallocate();\n    this._addPooledResourceToAvailableObjects(pooledResource);\n\n    this._dispense();\n    return this._Promise.resolve();\n  }\n\n  /**\n   * Request the resource to be destroyed. The factory's destroy handler\n   * will also be called.\n   *\n   * This should be called within an acquire() block as an alternative to release().\n   *\n   * @param {Object} resource\n   *   The acquired resource to be destoyed.\n   */\n  destroy(resource) {\n    // check for an outstanding loan\n    const loan = this._resourceLoans.get(resource);\n\n    if (loan === undefined) {\n      return this._Promise.reject(\n        new Error(\"Resource not currently part of this pool\")\n      );\n    }\n\n    this._resourceLoans.delete(resource);\n    loan.resolve();\n    const pooledResource = loan.pooledResource;\n\n    pooledResource.deallocate();\n    this._destroy(pooledResource);\n\n    this._dispense();\n    return this._Promise.resolve();\n  }\n\n  _addPooledResourceToAvailableObjects(pooledResource) {\n    pooledResource.idle();\n    if (this._config.fifo === true) {\n      this._availableObjects.push(pooledResource);\n    } else {\n      this._availableObjects.unshift(pooledResource);\n    }\n  }\n\n  /**\n   * Disallow any new acquire calls and let the request backlog dissapate.\n   * The Pool will no longer attempt to maintain a \"min\" number of resources\n   * and will only make new resources on demand.\n   * Resolves once all resource requests are fulfilled and all resources are returned to pool and available...\n   * Should probably be called \"drain work\"\n   * @returns {Promise}\n   */\n  drain() {\n    this._draining = true;\n    return this.__allResourceRequestsSettled()\n      .then(() => {\n        return this.__allResourcesReturned();\n      })\n      .then(() => {\n        this._descheduleEvictorRun();\n      });\n  }\n\n  __allResourceRequestsSettled() {\n    if (this._waitingClientsQueue.length > 0) {\n      // wait for last waiting client to be settled\n      // FIXME: what if they can \"resolve\" out of order....?\n      return reflector(this._waitingClientsQueue.tail.promise);\n    }\n    return this._Promise.resolve();\n  }\n\n  // FIXME: this is a horrific mess\n  __allResourcesReturned() {\n    const ps = Array.from(this._resourceLoans.values())\n      .map(loan => loan.promise)\n      .map(reflector);\n    return this._Promise.all(ps);\n  }\n\n  /**\n   * Forcibly destroys all available resources regardless of timeout.  Intended to be\n   * invoked as part of a drain.  Does not prevent the creation of new\n   * resources as a result of subsequent calls to acquire.\n   *\n   * Note that if factory.min > 0 and the pool isn't \"draining\", the pool will destroy all idle resources\n   * in the pool, but replace them with newly created resources up to the\n   * specified factory.min value.  If this is not desired, set factory.min\n   * to zero before calling clear()\n   *\n   */\n  clear() {\n    const reflectedCreatePromises = Array.from(\n      this._factoryCreateOperations\n    ).map(reflector);\n\n    // wait for outstanding factory.create to complete\n    return this._Promise.all(reflectedCreatePromises).then(() => {\n      // Destroy existing resources\n      // @ts-ignore\n      for (const resource of this._availableObjects) {\n        this._destroy(resource);\n      }\n      const reflectedDestroyPromises = Array.from(\n        this._factoryDestroyOperations\n      ).map(reflector);\n      return this._Promise.all(reflectedDestroyPromises);\n    });\n  }\n\n  /**\n   * How many resources are available to allocated\n   * (includes resources that have not been tested and may faul validation)\n   * NOTE: internal for now as the name is awful and might not be useful to anyone\n   * @return {Number} number of resources the pool has to allocate\n   */\n  get _potentiallyAllocableResourceCount() {\n    return (\n      this._availableObjects.length +\n      this._testOnBorrowResources.size +\n      this._testOnReturnResources.size +\n      this._factoryCreateOperations.size\n    );\n  }\n\n  /**\n   * The combined count of the currently created objects and those in the\n   * process of being created\n   * Does NOT include resources in the process of being destroyed\n   * sort of legacy...\n   * @return {Number}\n   */\n  get _count() {\n    return this._allObjects.size + this._factoryCreateOperations.size;\n  }\n\n  /**\n   * How many more resources does the pool have room for\n   * @return {Number} number of resources the pool could create before hitting any limits\n   */\n  get spareResourceCapacity() {\n    return (\n      this._config.max -\n      (this._allObjects.size + this._factoryCreateOperations.size)\n    );\n  }\n\n  /**\n   * see _count above\n   * @return {Number} [description]\n   */\n  get size() {\n    return this._count;\n  }\n\n  /**\n   * number of available resources\n   * @return {Number} [description]\n   */\n  get available() {\n    return this._availableObjects.length;\n  }\n\n  /**\n   * number of resources that are currently acquired\n   * @return {Number} [description]\n   */\n  get borrowed() {\n    return this._resourceLoans.size;\n  }\n\n  /**\n   * number of waiting acquire calls\n   * @return {Number} [description]\n   */\n  get pending() {\n    return this._waitingClientsQueue.length;\n  }\n\n  /**\n   * maximum size of the pool\n   * @return {Number} [description]\n   */\n  get max() {\n    return this._config.max;\n  }\n\n  /**\n   * minimum size of the pool\n   * @return {Number} [description]\n   */\n  get min() {\n    return this._config.min;\n  }\n}\n\nmodule.exports = Pool;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","module.exports = function(factory) {\n  if (typeof factory.create !== \"function\") {\n    throw new TypeError(\"factory.create must be a function\");\n  }\n\n  if (typeof factory.destroy !== \"function\") {\n    throw new TypeError(\"factory.destroy must be a function\");\n  }\n\n  if (\n    typeof factory.validate !== \"undefined\" &&\n    typeof factory.validate !== \"function\"\n  ) {\n    throw new TypeError(\"factory.validate must be a function\");\n  }\n};\n","\"use strict\";\n\nconst PoolDefaults = require(\"./PoolDefaults\");\n\nclass PoolOptions {\n  /**\n   * @param {Object} opts\n   *   configuration for the pool\n   * @param {Number} [opts.max=null]\n   *   Maximum number of items that can exist at the same time.  Default: 1.\n   *   Any further acquire requests will be pushed to the waiting list.\n   * @param {Number} [opts.min=null]\n   *   Minimum number of items in pool (including in-use). Default: 0.\n   *   When the pool is created, or a resource destroyed, this minimum will\n   *   be checked. If the pool resource count is below the minimum, a new\n   *   resource will be created and added to the pool.\n   * @param {Number} [opts.maxWaitingClients=null]\n   *   maximum number of queued requests allowed after which acquire calls will be rejected\n   * @param {Boolean} [opts.testOnBorrow=false]\n   *   should the pool validate resources before giving them to clients. Requires that either\n   *   `factory.validate` or `factory.validateAsync` to be specified.\n   * @param {Boolean} [opts.testOnReturn=false]\n   *   should the pool validate resources before returning them to the pool.\n   * @param {Number} [opts.acquireTimeoutMillis=null]\n   *   Delay in milliseconds after which the an `acquire` call will fail. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} [opts.priorityRange=1]\n   *   The range from 1 to be treated as a valid priority\n   * @param {Boolean} [opts.fifo=true]\n   *   Sets whether the pool has LIFO (last in, first out) behaviour with respect to idle objects.\n   *   if false then pool has FIFO behaviour\n   * @param {Boolean} [opts.autostart=true]\n   *   Should the pool start creating resources etc once the constructor is called\n   * @param {Number} [opts.evictionRunIntervalMillis=0]\n   *   How often to run eviction checks.  Default: 0 (does not run).\n   * @param {Number} [opts.numTestsPerEvictionRun=3]\n   *   Number of resources to check each eviction run.  Default: 3.\n   * @param {Number} [opts.softIdleTimeoutMillis=-1]\n   *   amount of time an object may sit idle in the pool before it is eligible\n   *   for eviction by the idle object evictor (if any), with the extra condition\n   *   that at least \"min idle\" object instances remain in the pool. Default -1 (nothing can get evicted)\n   * @param {Number} [opts.idleTimeoutMillis=30000]\n   *   the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction\n   *   due to idle time. Supercedes \"softIdleTimeoutMillis\" Default: 30000\n   * @param {typeof Promise} [opts.Promise=Promise]\n   *   What promise implementation should the pool use, defaults to native promises.\n   */\n  constructor(opts) {\n    const poolDefaults = new PoolDefaults();\n\n    opts = opts || {};\n\n    this.fifo = typeof opts.fifo === \"boolean\" ? opts.fifo : poolDefaults.fifo;\n    this.priorityRange = opts.priorityRange || poolDefaults.priorityRange;\n\n    this.testOnBorrow =\n      typeof opts.testOnBorrow === \"boolean\"\n        ? opts.testOnBorrow\n        : poolDefaults.testOnBorrow;\n    this.testOnReturn =\n      typeof opts.testOnReturn === \"boolean\"\n        ? opts.testOnReturn\n        : poolDefaults.testOnReturn;\n\n    this.autostart =\n      typeof opts.autostart === \"boolean\"\n        ? opts.autostart\n        : poolDefaults.autostart;\n\n    if (opts.acquireTimeoutMillis) {\n      // @ts-ignore\n      this.acquireTimeoutMillis = parseInt(opts.acquireTimeoutMillis, 10);\n    }\n\n    if (opts.maxWaitingClients) {\n      // @ts-ignore\n      this.maxWaitingClients = parseInt(opts.maxWaitingClients, 10);\n    }\n\n    // @ts-ignore\n    this.max = parseInt(opts.max, 10);\n    // @ts-ignore\n    this.min = parseInt(opts.min, 10);\n\n    this.max = Math.max(isNaN(this.max) ? 1 : this.max, 1);\n    this.min = Math.min(isNaN(this.min) ? 0 : this.min, this.max);\n\n    this.evictionRunIntervalMillis =\n      opts.evictionRunIntervalMillis || poolDefaults.evictionRunIntervalMillis;\n    this.numTestsPerEvictionRun =\n      opts.numTestsPerEvictionRun || poolDefaults.numTestsPerEvictionRun;\n    this.softIdleTimeoutMillis =\n      opts.softIdleTimeoutMillis || poolDefaults.softIdleTimeoutMillis;\n    this.idleTimeoutMillis =\n      opts.idleTimeoutMillis || poolDefaults.idleTimeoutMillis;\n\n    this.Promise = opts.Promise != null ? opts.Promise : poolDefaults.Promise;\n  }\n}\n\nmodule.exports = PoolOptions;\n","\"use strict\";\n/**\n * Create the default settings used by the pool\n *\n * @class\n */\nclass PoolDefaults {\n  constructor() {\n    this.fifo = true;\n    this.priorityRange = 1;\n\n    this.testOnBorrow = false;\n    this.testOnReturn = false;\n\n    this.autostart = true;\n\n    this.evictionRunIntervalMillis = 0;\n    this.numTestsPerEvictionRun = 3;\n    this.softIdleTimeoutMillis = -1;\n    this.idleTimeoutMillis = 30000;\n\n    // FIXME: no defaults!\n    this.acquireTimeoutMillis = null;\n    this.maxWaitingClients = null;\n\n    this.min = null;\n    this.max = null;\n    // FIXME: this seems odd?\n    this.Promise = Promise;\n  }\n}\n\nmodule.exports = PoolDefaults;\n","\"use strict\";\n\nconst Deferred = require(\"./Deferred\");\nconst errors = require(\"./errors\");\n\nfunction fbind(fn, ctx) {\n  return function bound() {\n    return fn.apply(ctx, arguments);\n  };\n}\n\n/**\n * Wraps a users request for a resource\n * Basically a promise mashed in with a timeout\n * @private\n */\nclass ResourceRequest extends Deferred {\n  /**\n   * [constructor description]\n   * @param  {Number} ttl     timeout\n   */\n  constructor(ttl, Promise) {\n    super(Promise);\n    this._creationTimestamp = Date.now();\n    this._timeout = null;\n\n    if (ttl !== undefined) {\n      this.setTimeout(ttl);\n    }\n  }\n\n  setTimeout(delay) {\n    if (this._state !== ResourceRequest.PENDING) {\n      return;\n    }\n    const ttl = parseInt(delay, 10);\n\n    if (isNaN(ttl) || ttl <= 0) {\n      throw new Error(\"delay must be a positive int\");\n    }\n\n    const age = Date.now() - this._creationTimestamp;\n\n    if (this._timeout) {\n      this.removeTimeout();\n    }\n\n    this._timeout = setTimeout(\n      fbind(this._fireTimeout, this),\n      Math.max(ttl - age, 0)\n    );\n  }\n\n  removeTimeout() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n    this._timeout = null;\n  }\n\n  _fireTimeout() {\n    this.reject(new errors.TimeoutError(\"ResourceRequest timed out\"));\n  }\n\n  reject(reason) {\n    this.removeTimeout();\n    super.reject(reason);\n  }\n\n  resolve(value) {\n    this.removeTimeout();\n    super.resolve(value);\n  }\n}\n\nmodule.exports = ResourceRequest;\n","\"use strict\";\n\nclass ExtendableError extends Error {\n  constructor(message) {\n    super(message);\n    // @ts-ignore\n    this.name = this.constructor.name;\n    this.message = message;\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n  }\n}\n\n/* eslint-disable no-useless-constructor */\nclass TimeoutError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n/* eslint-enable no-useless-constructor */\n\nmodule.exports = {\n  TimeoutError: TimeoutError\n};\n","\"use strict\";\n\nconst Deferred = require(\"./Deferred\");\n\n/**\n * Plan is to maybe add tracking via Error objects\n * and other fun stuff!\n */\n\nclass ResourceLoan extends Deferred {\n  /**\n   *\n   * @param  {any} pooledResource the PooledResource this loan belongs to\n   * @return {any}                [description]\n   */\n  constructor(pooledResource, Promise) {\n    super(Promise);\n    this._creationTimestamp = Date.now();\n    this.pooledResource = pooledResource;\n  }\n\n  reject() {\n    /**\n     * Loans can only be resolved at the moment\n     */\n  }\n}\n\nmodule.exports = ResourceLoan;\n","\"use strict\";\n\nconst PooledResourceStateEnum = require(\"./PooledResourceStateEnum\");\n\n/**\n * @class\n * @private\n */\nclass PooledResource {\n  constructor(resource) {\n    this.creationTime = Date.now();\n    this.lastReturnTime = null;\n    this.lastBorrowTime = null;\n    this.lastIdleTime = null;\n    this.obj = resource;\n    this.state = PooledResourceStateEnum.IDLE;\n  }\n\n  // mark the resource as \"allocated\"\n  allocate() {\n    this.lastBorrowTime = Date.now();\n    this.state = PooledResourceStateEnum.ALLOCATED;\n  }\n\n  // mark the resource as \"deallocated\"\n  deallocate() {\n    this.lastReturnTime = Date.now();\n    this.state = PooledResourceStateEnum.IDLE;\n  }\n\n  invalidate() {\n    this.state = PooledResourceStateEnum.INVALID;\n  }\n\n  test() {\n    this.state = PooledResourceStateEnum.VALIDATION;\n  }\n\n  idle() {\n    this.lastIdleTime = Date.now();\n    this.state = PooledResourceStateEnum.IDLE;\n  }\n\n  returning() {\n    this.state = PooledResourceStateEnum.RETURNING;\n  }\n}\n\nmodule.exports = PooledResource;\n","\"use strict\";\n\nconst PooledResourceStateEnum = {\n  ALLOCATED: \"ALLOCATED\", // In use\n  IDLE: \"IDLE\", // In the queue, not in use.\n  INVALID: \"INVALID\", // Failed validation\n  RETURNING: \"RETURNING\", // Resource is in process of returning\n  VALIDATION: \"VALIDATION\" // Currently being tested\n};\n\nmodule.exports = PooledResourceStateEnum;\n","\"use strict\";\n\n/**\n * Creates an interator for a DoublyLinkedList starting at the given node\n * It's internal cursor will remains relative to the last \"iterated\" node as that\n * node moves through the list until it either iterates to the end of the list,\n * or the the node it's tracking is removed from the list. Until the first 'next'\n * call it tracks the head/tail of the linked list. This means that one can create\n * an iterator on an empty list, then add nodes, and then the iterator will follow\n * those nodes. Because the DoublyLinkedList nodes don't track their owning \"list\" and\n * it's highly inefficient to walk the list for every iteration, the iterator won't know\n * if the node has been detached from one List and added to another list, or if the iterator\n *\n * The created object is an es6 compatible iterator\n */\nclass DoublyLinkedListIterator {\n  /**\n   * @param  {Object} doublyLinkedList     a node that is part of a doublyLinkedList\n   * @param  {Boolean} [reverse=false]     is this a reverse iterator? default: false\n   */\n  constructor(doublyLinkedList, reverse) {\n    this._list = doublyLinkedList;\n    // NOTE: these key names are tied to the DoublyLinkedListIterator\n    this._direction = reverse === true ? \"prev\" : \"next\";\n    this._startPosition = reverse === true ? \"tail\" : \"head\";\n    this._started = false;\n    this._cursor = null;\n    this._done = false;\n  }\n\n  _start() {\n    this._cursor = this._list[this._startPosition];\n    this._started = true;\n  }\n\n  _advanceCursor() {\n    if (this._started === false) {\n      this._started = true;\n      this._cursor = this._list[this._startPosition];\n      return;\n    }\n    this._cursor = this._cursor[this._direction];\n  }\n\n  reset() {\n    this._done = false;\n    this._started = false;\n    this._cursor = null;\n  }\n\n  remove() {\n    if (\n      this._started === false ||\n      this._done === true ||\n      this._isCursorDetached()\n    ) {\n      return false;\n    }\n    this._list.remove(this._cursor);\n  }\n\n  next() {\n    if (this._done === true) {\n      return { done: true };\n    }\n\n    this._advanceCursor();\n\n    // if there is no node at the cursor or the node at the cursor is no longer part of\n    // a doubly linked list then we are done/finished/kaput\n    if (this._cursor === null || this._isCursorDetached()) {\n      this._done = true;\n      return { done: true };\n    }\n\n    return {\n      value: this._cursor,\n      done: false\n    };\n  }\n\n  /**\n   * Is the node detached from a list?\n   * NOTE: you can trick/bypass/confuse this check by removing a node from one DoublyLinkedList\n   * and adding it to another.\n   * TODO: We can make this smarter by checking the direction of travel and only checking\n   * the required next/prev/head/tail rather than all of them\n   * @return {Boolean}      [description]\n   */\n  _isCursorDetached() {\n    return (\n      this._cursor.prev === null &&\n      this._cursor.next === null &&\n      this._list.tail !== this._cursor &&\n      this._list.head !== this._cursor\n    );\n  }\n}\n\nmodule.exports = DoublyLinkedListIterator;\n","\"use strict\";\n\nconst DoublyLinkedList = require(\"./DoublyLinkedList\");\nconst Deque = require(\"./Deque\");\n\n/**\n * Sort of a internal queue for holding the waiting\n * resource requets for a given \"priority\".\n * Also handles managing timeouts rejections on items (is this the best place for this?)\n * This is the last point where we know which queue a resourceRequest is in\n *\n */\nclass Queue extends Deque {\n  /**\n   * Adds the obj to the end of the list for this slot\n   * we completely override the parent method because we need access to the\n   * node for our rejection handler\n   * @param {any} resourceRequest [description]\n   */\n  push(resourceRequest) {\n    const node = DoublyLinkedList.createNode(resourceRequest);\n    resourceRequest.promise.catch(this._createTimeoutRejectionHandler(node));\n    this._list.insertEnd(node);\n  }\n\n  _createTimeoutRejectionHandler(node) {\n    return reason => {\n      if (reason.name === \"TimeoutError\") {\n        this._list.remove(node);\n      }\n    };\n  }\n}\n\nmodule.exports = Queue;\n","\"use strict\";\n\nfunction noop() {}\n\n/**\n * Reflects a promise but does not expose any\n * underlying value or rejection from that promise.\n * @param  {Promise} promise [description]\n * @return {Promise}         [description]\n */\nexports.reflector = function(promise) {\n  return promise.then(noop, noop);\n};\n","class Filter extends Error {\n  constructor () {\n    super();\n\n    this.status = 400;\n    this.children = [];\n  }\n\n  get message () {\n    return this.children.map(child => child.message).join(', ');\n  }\n\n  add (value) {\n    this.children.push(value);\n  }\n\n  empty () {\n    return this.children.length === 0;\n  }\n}\n\nmodule.exports = Filter;\n","'use strict'\n\n/**\n * Expose compositor.\n */\n\nmodule.exports = compose\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose (middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n","const Query = require('./query');\nconst Factory = require('async-factory');\nconst connectionFactory = new Factory();\n\nlet sessionNextId = 0;\n\nclass Session {\n  constructor ({ manager }) {\n    this.id = `session-${sessionNextId++}`;\n    this.manager = manager;\n    this.connections = {};\n  }\n\n  factory (schema, criteria) {\n    return new Query({ session: this, schema, criteria });\n  }\n\n  async acquire (name) {\n    let pool = this.manager.getPool(name);\n\n    if (!this.connections[pool.name]) {\n      let id = `${this.id}-${pool.name}`;\n      this.connections[pool.name] = await connectionFactory.singleton(id, () => pool.acquire());\n\n      await this.connections[pool.name].begin();\n    }\n\n    return this.connections[pool.name];\n  }\n\n  async dispose () {\n    await this.rollback();\n    await Promise.all(Object.keys(this.connections).map(name => {\n      return this.manager.getPool(name).release(this.connections[name]);\n    }));\n\n    this.connections = {};\n  }\n\n  close () {\n    return this.commit();\n  }\n\n  async commit () {\n    await Promise.all(Object.keys(this.connections).map(async name => {\n      let connection = this.connections[name];\n      await connection.commit();\n    }));\n  }\n\n  async rollback () {\n    await Promise.all(Object.keys(this.connections).map(async name => {\n      let connection = this.connections[name];\n      await connection.rollback();\n    }));\n  }\n\n  async begin () {\n    await Promise.all(Object.keys(this.connections).map(async name => {\n      let connection = this.connections[name];\n      await connection.begin();\n    }));\n  }\n\n  async flush () {\n    await this.commit();\n    await this.begin();\n  }\n\n  parseSchema (name) {\n    let connection;\n    let schema;\n    if (Array.isArray(name)) {\n      if (name.length < 2) {\n        throw new Error('Malformed schema name tupple');\n      }\n      [ connection, schema ] = name;\n    } else if (name.indexOf('.') !== -1) {\n      [ connection, schema ] = name.split('.');\n    } else {\n      connection = this.manager.getPool().name;\n      schema = name;\n    }\n\n    let pool = this.manager.getPool(connection);\n    return [ pool.name, pool.getSchema(schema) ];\n  }\n}\n\nmodule.exports = Session;\n","class Space {\n  constructor (fn) {\n    this.fn = fn;\n    this.locks = [];\n    this.done = false;\n  }\n\n  async fetch () {\n    if (!this.done) {\n      await new Promise(async (resolve, reject) => {\n        this.locks.push([ resolve, reject ]);\n\n        if (this.locks.length > 1) {\n          return;\n        }\n\n        try {\n          let { fn } = this;\n          this.value = await fn();\n        } catch (err) {\n          this.error = err;\n        }\n\n        this.done = true;\n        this.locks.splice(0).forEach(([ resolve, reject ]) => {\n          if (this.error) {\n            reject(this.error);\n          } else {\n            resolve(this.value);\n          }\n        });\n      });\n    }\n\n    if (this.error) {\n      throw this.error;\n    }\n\n    return this.value;\n  }\n}\n\nclass Factory {\n  constructor () {\n    this.spaces = new Map();\n  }\n\n  async singleton (key, fn) {\n    fn = fn || key;\n\n    let space;\n    if (this.spaces.has(key)) {\n      space = this.spaces.get(key);\n    } else {\n      space = new Space(fn);\n      this.spaces.set(key, space);\n    }\n\n    return space.fetch(); // return promise\n  }\n}\n\nmodule.exports = Factory;\n","module.exports = {\n  NBoolean: require('./nboolean'),\n  NDatetime: require('./ndatetime'),\n  NDouble: require('./ndouble'),\n  NField: require('./nfield'),\n  NInteger: require('./ninteger'),\n  NReference: require('./nreference'),\n  NString: require('./nstring'),\n  NList: require('./nlist'),\n  NMap: require('./nmap'),\n  NEnum: require('./nenum'),\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NBoolean extends NField {\n  attach (value) {\n    if (value === 'false' || value === '0' || value === '') {\n      return false;\n    }\n\n    return Boolean(value);\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NDouble extends NField {\n  attach (value) {\n    return parseFloat(value);\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NInteger extends NField {\n  attach (value) {\n    return parseInt(value, 10);\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NReference extends NField {\n  to (to) {\n    this.to = to;\n\n    return this;\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NList extends NField {\n  of (childField) {\n    this.childField = childField;\n\n    return this;\n  }\n\n  attach (value) {\n    if (!value) {\n      return;\n    }\n\n    if (typeof value === 'string') {\n      try {\n        value = JSON.parse(value);\n      } catch (err) {\n        return;\n      }\n    }\n\n    if (!Array.isArray(value)) {\n      return;\n    }\n\n    if (this.childField) {\n      value = value.map(o => this.childField.attach(o));\n    }\n\n    return value;\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NMap extends NField {\n  attach (value) {\n    if (!value) {\n      return;\n    }\n\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (err) {\n        return;\n      }\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        return;\n      }\n\n      return value;\n    }\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NEnum extends NField {\n  constructor (name) {\n    super(name);\n\n    this.enumTo = [];\n  }\n\n  to (enumTo) {\n    this.enumTo = enumTo;\n\n    return this;\n  }\n\n  attach (value) {\n    if (!value) {\n      return;\n    }\n\n    return this.enumTo.find(v => v === value);\n  }\n};\n"],"sourceRoot":""}