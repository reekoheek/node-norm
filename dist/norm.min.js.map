{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./schemas/nfield.js","webpack:///./connection.js","webpack:///./adapters/memory.js","webpack:///./node_modules/uuid/v4.js","webpack:///./node_modules/uuid/lib/rng-browser.js","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./node_modules/generic-pool/lib/Deferred.js","webpack:///./node_modules/generic-pool/lib/Deque.js","webpack:///./pool.js","webpack:///./node_modules/generic-pool/lib/DefaultEvictor.js","webpack:///./node_modules/generic-pool/lib/DoublyLinkedList.js","webpack:///./node_modules/generic-pool/lib/DequeIterator.js","webpack:///./node_modules/generic-pool/lib/PriorityQueue.js","webpack:///./schema.js","webpack:///./model.js","webpack:///./query.js","webpack:///./filter.js","webpack:///./filters/are.js","webpack:///./filters/default.js","webpack:///./filters/email.js","webpack:///./filters/enum.js","webpack:///./filters/exists.js","webpack:///./filters/notEmpty.js","webpack:///./filters/required.js","webpack:///./filters/requiredIf.js","webpack:///./filters/unique.js","webpack:///./index.js","webpack:///./manager.js","webpack:///./node_modules/generic-pool/index.js","webpack:///./node_modules/generic-pool/lib/Pool.js","webpack:///./node_modules/events/events.js","webpack:///./node_modules/generic-pool/lib/factoryValidator.js","webpack:///./node_modules/generic-pool/lib/PoolOptions.js","webpack:///./node_modules/generic-pool/lib/PoolDefaults.js","webpack:///./node_modules/generic-pool/lib/ResourceRequest.js","webpack:///./node_modules/generic-pool/lib/errors.js","webpack:///./node_modules/generic-pool/lib/ResourceLoan.js","webpack:///./node_modules/generic-pool/lib/PooledResource.js","webpack:///./node_modules/generic-pool/lib/PooledResourceStateEnum.js","webpack:///./node_modules/generic-pool/lib/DoublyLinkedListIterator.js","webpack:///./node_modules/generic-pool/lib/Queue.js","webpack:///./node_modules/generic-pool/lib/utils.js","webpack:///./errors/filter.js","webpack:///./node_modules/koa-compose/index.js","webpack:///./session.js","webpack:///./node_modules/async-factory/index.js","webpack:///./filters sync ^\\.\\/.*$","webpack:///./schemas/index.js","webpack:///./schemas/nboolean.js","webpack:///./schemas/ndatetime.js","webpack:///./schemas/ndouble.js","webpack:///./schemas/ninteger.js","webpack:///./schemas/nreference.js","webpack:///./schemas/nstring.js","webpack:///./schemas/nlist.js","webpack:///./schemas/nmap.js","webpack:///./schemas/nenum.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Filter","[object Object]","this","filters","forEach","filter","push","session","row","trim","field","reduce","async","promise","_hasTx","_begin","_commit","_rollback","Connection","uuidv4","Memory","options","super","data","query","callback","schema","criteria","sorts","id","find","_matchCriteria","sortFields","keys","sort","a","b","score","index","sortV","fieldScore","Math","pow","length","offset","slice","map","rows","inserted","assign","sets","load","affected","indexOf","splice","useSkipAndLimit","count","critValue","nkey","op","split","rowValue","valid","subCriteria","re","RegExp","match","Error","window","norm","adapters","rng","bytesToUuid","buf","Array","rnds","random","ii","getRandomValues","crypto","msCrypto","rnds8","Uint8Array","byteToHex","toString","substr","bth","join","Deferred","Promise","_state","PENDING","_resolve","undefined","_reject","_promise","resolve","reject","state","reason","REJECTED","FULFILLED","DoublyLinkedList","DequeIterator","_list","node","head","remove","element","createNode","insertBeginning","insertEnd","tail","iterator","genericPool","Schema","poolNextId","config","adapter","schemas","min","max","colOptions","putSchema","Adapter","writable","configurable","createPool","fields","observers","modelClass","connection","args","_pool","acquire","release","clear","pooledResource","availableObjectsCount","idleTime","Date","now","lastIdleTime","softIdleTimeoutMillis","idleTimeoutMillis","prev","next","insertBefore","insertAfter","newNode","DoublyLinkedListIterator","result","Queue","size","_size","_slots","_length","slots","obj","priority","sl","shift","FilterError","Model","compose","attach","ctx","_observerRunner","units","observer","partial","error","add","all","execFilter","err","empty","parseSchema","set","observe","_delete","delete","_save","insert","update","drop","truncate","limit","signature","signatureType","fn","isArray","normalizedSignature","JSON","stringify","schemaO","getSchema","console","stack","defaultValue","toLowerCase","parts","domain","pop","user","replace","enums","factory","single","expected","foundRow","Manager","Pool","lib","Query","Session","ctr","connections","pools","main","putPool","pool","openSession","close","dispose","manager","Deque","PriorityQueue","DefaultEvictor","EventEmitter","factoryValidator","PoolOptions","ResourceRequest","ResourceLoan","PooledResource","reflector","FACTORY_CREATE_ERROR","FACTORY_DESTROY_ERROR","Evictor","_config","_Promise","_factory","_draining","_started","_waitingClientsQueue","priorityRange","_factoryCreateOperations","Set","_factoryDestroyOperations","_availableObjects","_testOnBorrowResources","_testOnReturnResources","_validationOperations","_allObjects","_resourceLoans","Map","_evictionIterator","_evictor","_scheduledEviction","autostart","start","invalidate","destroyPromise","destroy","wrappedDestroyPromise","_trackOperation","catch","emit","_ensureMinimum","test","validationPromise","validate","wrappedValidationPromise","then","isValid","_destroy","_dispense","_dispatchPooledResourceToNextWaitingClient","numWaitingClients","resourceShortfall","_potentiallyAllocableResourceCount","actualNumberOfResourcesToCreate","spareResourceCapacity","_createResource","testOnBorrow","desiredNumberOfResourcesToMoveIntoTest","actualNumberOfResourcesToMoveIntoTest","_testOnBorrow","actualNumberOfResourcesToDispatch","_dispatchResource","clientResourceRequest","dequeue","_addPooledResourceToAvailableObjects","loan","allocate","operation","v","e","factoryPromise","wrappedFactoryPromise","resource","_handleNewResource","minShortfall","_count","testsToRun","numTestsPerEvictionRun","evictionConfig","testsHaveRun","iterationResult","done","reset","shouldEvict","evict","evictionRunIntervalMillis","setTimeout","_evict","_scheduleEvictorRun","clearTimeout","maxWaitingClients","resourceRequest","acquireTimeoutMillis","enqueue","deallocate","idle","fifo","unshift","__allResourceRequestsSettled","__allResourcesReturned","_descheduleEvictorRun","ps","from","values","reflectedCreatePromises","reflectedDestroyPromises","available","borrowed","pending","_events","_maxListeners","isFunction","arg","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNumber","isNaN","TypeError","type","er","handler","len","listeners","arguments","context","apply","addListener","listener","newListener","warned","trace","on","once","fired","g","removeListener","list","position","removeAllListeners","listenerCount","evlistener","emitter","PoolDefaults","opts","poolDefaults","testOnReturn","parseInt","errors","ttl","_creationTimestamp","_timeout","delay","age","removeTimeout","fbind","_fireTimeout","TimeoutError","ExtendableError","message","constructor","captureStackTrace","PooledResourceStateEnum","creationTime","lastReturnTime","lastBorrowTime","IDLE","ALLOCATED","INVALID","VALIDATION","RETURNING","doublyLinkedList","reverse","_direction","_startPosition","_cursor","_done","_isCursorDetached","_advanceCursor","_createTimeoutRejectionHandler","noop","status","children","child","middleware","dispatch","connectionFactory","sessionNextId","getPool","singleton","begin","rollback","commit","Space","locks","spaces","space","has","fetch","./are","./are.js","./default","./default.js","./email","./email.js","./enum","./enum.js","./exists","./exists.js","./notEmpty","./notEmpty.js","./required","./required.js","./requiredIf","./requiredIf.js","./unique","./unique.js","webpackContext","req","webpackContextResolve","code","NBoolean","NDatetime","NDouble","NField","NInteger","NReference","NString","NList","NMap","NEnum","Boolean","date","getTime","parseFloat","to","childField","parse","enumTo"],"mappings":"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","file":"norm.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","const Filter = require('../filter');\n\nclass NField {\n  constructor (name) {\n    this.name = name;\n    this.filters = [];\n  }\n\n  filter (...filters) {\n    filters.forEach(filter => {\n      this.filters.push(Filter.get(filter));\n    });\n\n    return this;\n  }\n\n  execFilter (value, { session, row }) {\n    // when value is string, trim first before filtering\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    let field = this;\n    return this.filters.reduce(\n      async (promise, filter) => filter(await promise, { session, row, field }),\n      value\n    );\n  }\n\n  attach (value) {\n    return value;\n  }\n}\n\nmodule.exports = NField;\n","class Connection {\n  constructor ({ name }) {\n    this.name = name;\n    this._hasTx = false;\n  }\n\n  async begin () {\n    if (this._hasTx) {\n      return;\n    }\n\n    await this._begin();\n\n    this._hasTx = true;\n  }\n\n  async commit () {\n    if (!this._hasTx) {\n      return;\n    }\n\n    await this._commit();\n    this._hasTx = false;\n  }\n\n  async rollback () {\n    if (!this._hasTx) {\n      return;\n    }\n\n    await this._rollback();\n    this._hasTx = false;\n  }\n\n  _begin () {\n    // do nothing\n  }\n\n  _commit () {\n    // do nothing\n  }\n\n  _rollback () {\n    // do nothing\n  }\n}\n\nmodule.exports = Connection;\n","const Connection = require('../connection');\nconst uuidv4 = require('uuid/v4');\n\nclass Memory extends Connection {\n  constructor (options) {\n    super(options);\n\n    this.data = options.data || {};\n  }\n\n  load (query, callback = () => {}) {\n    let data = this.data[query.schema.name] || [];\n\n    let { criteria, sorts } = query;\n\n    if (criteria && typeof criteria.id !== 'undefined') {\n      const row = data.find(row => row.id === criteria.id);\n      data = row ? [ row ] : [];\n    } else {\n      data = data.filter(row => this._matchCriteria(criteria, row));\n\n      if (sorts) {\n        let sortFields = Object.keys(sorts);\n\n        data = data.sort((a, b) => {\n          let score = 0;\n          sortFields.forEach((field, index) => {\n            let sortV = sorts[field];\n            let fieldScore = Math.pow(2, sortFields.length - index - 1) * sortV;\n            if (a[field] < b[field]) {\n              score -= fieldScore;\n            } else if (a[field] > b[field]) {\n              score += fieldScore;\n            }\n          });\n          return score;\n        });\n      }\n\n      if (query.offset < 0) {\n        return data;\n      } else if (query.length < 0) {\n        data = data.slice(query.offset);\n      } else {\n        data = data.slice(query.offset, query.offset + query.length);\n      }\n    }\n\n    return data.map(row => {\n      callback(row);\n      return row;\n    });\n  }\n\n  insert (query, callback = () => {}) {\n    const data = this.data[query.schema.name] = this.data[query.schema.name] || [];\n\n    return query.rows.reduce((inserted, row) => {\n      row = Object.assign({ id: uuidv4() }, row);\n      data.push(row);\n      callback(row);\n      inserted++;\n      return inserted;\n    }, 0);\n  }\n\n  update (query) {\n    let keys = Object.keys(query.sets);\n    return this.load(query).reduce((affected, row) => {\n      let fieldChanges = keys.filter(key => {\n        if (row[key] === query.sets[key]) {\n          return false;\n        }\n\n        row[key] = query.sets[key];\n        return true;\n      });\n      if (fieldChanges.length) {\n        affected++;\n      }\n      return affected;\n    }, 0);\n  }\n\n  drop (query) {\n    delete this.data[query.schema.name];\n  }\n\n  truncate (query) {\n    this.data[query.schema.name] = [];\n  }\n\n  delete (query) {\n    const data = this.data[query.schema.name] = this.data[query.schema.name] || [];\n\n    this.load(query).forEach(row => {\n      const key = data.indexOf(row);\n      if (key >= 0) {\n        data.splice(key, 1);\n      }\n    });\n  }\n\n  async count (query, useSkipAndLimit) {\n    let { length, offset } = query;\n\n    if (!useSkipAndLimit) {\n      query.offset = 0;\n      query.length = -1;\n    }\n\n    let count = 0;\n\n    await this.load(query, () => count++);\n\n    query.offset = offset;\n    query.length = length;\n\n    return count;\n  }\n\n  _matchCriteria (criteria, row) {\n    if (!criteria) {\n      return true;\n    }\n\n    for (let key in criteria) {\n      let critValue = criteria[key];\n      let [ nkey, op = 'eq' ] = key.split('!');\n      let rowValue = row[nkey];\n      switch (op) {\n        case 'or': {\n          let valid = false;\n          for (let subCriteria of critValue) {\n            let match = this._matchCriteria(subCriteria, row);\n            if (match) {\n              valid = true;\n              break;\n            }\n          }\n          if (!valid) {\n            return false;\n          }\n          break;\n        }\n        case 'and':\n          for (let subCriteria of critValue) {\n            if (!this._matchCriteria(subCriteria, row)) {\n              return false;\n            }\n          }\n          break;\n        case 'eq':\n          if (critValue !== rowValue) {\n            return false;\n          }\n          break;\n        case 'ne':\n          if (critValue === rowValue) {\n            return false;\n          }\n          break;\n        case 'gt':\n          if (!(rowValue > critValue)) {\n            return false;\n          }\n          break;\n        case 'gte':\n          if (!(rowValue >= critValue)) {\n            return false;\n          }\n          break;\n        case 'lt':\n          if (!(rowValue < critValue)) {\n            return false;\n          }\n          break;\n        case 'lte':\n          if (!(rowValue <= critValue)) {\n            return false;\n          }\n          break;\n        case 'in':\n          if (critValue.indexOf(rowValue) === -1) {\n            return false;\n          }\n          break;\n        case 'nin':\n          if (critValue.indexOf(rowValue) !== -1) {\n            return false;\n          }\n          break;\n        case 'like': {\n          let re = new RegExp(critValue);\n          if (!rowValue.match(re)) {\n            return false;\n          }\n          break;\n        }\n        case 'regex':\n          if (!rowValue.match(critValue)) {\n            return false;\n          }\n          break;\n        case 'where':\n          if (!critValue(rowValue, row)) {\n            return false;\n          }\n          break;\n        default:\n          throw new Error(`Operator '${op}' is not implemented yet!`);\n      }\n    }\n\n    return true;\n  }\n}\n\nif (typeof window !== 'undefined') {\n  let norm = window.norm;\n  if (!norm) {\n    throw new Error('Norm is not defined yet!');\n  }\n\n  norm.adapters = norm.adapters || {};\n  norm.adapters.Memory = Memory;\n}\n\nmodule.exports = Memory;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","\"use strict\";\n\n/**\n * This is apparently a bit like a Jquery deferred, hence the name\n */\n\nclass Deferred {\n  constructor(Promise) {\n    this._state = Deferred.PENDING;\n    this._resolve = undefined;\n    this._reject = undefined;\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  reject(reason) {\n    if (this._state !== Deferred.PENDING) {\n      return;\n    }\n    this._state = Deferred.REJECTED;\n    this._reject(reason);\n  }\n\n  resolve(value) {\n    if (this._state !== Deferred.PENDING) {\n      return;\n    }\n    this._state = Deferred.FULFILLED;\n    this._resolve(value);\n  }\n}\n\n// TODO: should these really live here? or be a seperate 'state' enum\nDeferred.PENDING = \"PENDING\";\nDeferred.FULFILLED = \"FULFILLED\";\nDeferred.REJECTED = \"REJECTED\";\n\nmodule.exports = Deferred;\n","\"use strict\";\n\nconst DoublyLinkedList = require(\"./DoublyLinkedList\");\nconst DequeIterator = require(\"./DequeIterator\");\n/**\n * DoublyLinkedList backed double ended queue\n * implements just enough to keep the Pool\n */\nclass Deque {\n  constructor() {\n    this._list = new DoublyLinkedList();\n  }\n\n  /**\n   * removes and returns the first element from the queue\n   * @return {any} [description]\n   */\n  shift() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.head;\n    this._list.remove(node);\n\n    return node.data;\n  }\n\n  /**\n   * adds one elemts to the beginning of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n  unshift(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertBeginning(node);\n  }\n\n  /**\n   * adds one to the end of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n  push(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertEnd(node);\n  }\n\n  /**\n   * removes and returns the last element from the queue\n   */\n  pop() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.tail;\n    this._list.remove(node);\n\n    return node.data;\n  }\n\n  [Symbol.iterator]() {\n    return new DequeIterator(this._list);\n  }\n\n  iterator() {\n    return new DequeIterator(this._list);\n  }\n\n  reverseIterator() {\n    return new DequeIterator(this._list, true);\n  }\n\n  /**\n   * get a reference to the item at the head of the queue\n   * @return {any} [description]\n   */\n  get head() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    const node = this._list.head;\n    return node.data;\n  }\n\n  /**\n   * get a reference to the item at the tail of the queue\n   * @return {any} [description]\n   */\n  get tail() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    const node = this._list.tail;\n    return node.data;\n  }\n\n  get length() {\n    return this._list.length;\n  }\n}\n\nmodule.exports = Deque;\n","const genericPool = require('generic-pool');\nconst Schema = require('./schema');\n\nlet poolNextId = 0;\n\nclass Pool {\n  constructor (config) {\n    let { name, adapter = require('./adapters/memory'), schemas = [], min = 1, max = 1 } = config;\n\n    this.name = name || `pool-${poolNextId++}`;\n    this.schemas = {};\n\n    schemas.forEach(colOptions => this.putSchema(colOptions));\n\n    const Adapter = adapter;\n\n    Object.defineProperty(this, '_pool', {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: genericPool.createPool({\n        create () {\n          return new Adapter(config);\n        },\n        destroy () {\n          // noop\n        },\n      }, { min, max }),\n    });\n  }\n\n  putSchema ({ name, fields, observers, modelClass }) {\n    let connection = this.name;\n    this.schemas[name] = new Schema({ connection, name, fields, observers, modelClass });\n    return this;\n  }\n\n  /**\n   * Getter schema\n   *\n   * @param {string} name\n   */\n  getSchema (name) {\n    if (!this.schemas[name]) {\n      this.putSchema({ name });\n    }\n    return this.schemas[name];\n  }\n\n  acquire (...args) {\n    return this._pool.acquire(...args);\n  }\n\n  release (...args) {\n    return this._pool.release(...args);\n  }\n\n  drain (...args) {\n    return this._pool.acquire(...args);\n  }\n\n  clear (...args) {\n    return this._pool.clear(...args);\n  }\n}\n\nmodule.exports = Pool;\n","\"use strict\";\n\nclass DefaultEvictor {\n  evict(config, pooledResource, availableObjectsCount) {\n    const idleTime = Date.now() - pooledResource.lastIdleTime;\n\n    if (\n      config.softIdleTimeoutMillis < idleTime &&\n      config.min < availableObjectsCount\n    ) {\n      return true;\n    }\n\n    if (config.idleTimeoutMillis < idleTime) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = DefaultEvictor;\n","\"use strict\";\n\n/**\n * A Doubly Linked List, because there aren't enough in the world...\n * this is pretty much a direct JS port of the one wikipedia\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n *\n * For most usage 'insertBeginning' and 'insertEnd' should be enough\n *\n * nodes are expected to something like a POJSO like\n * {\n *   prev: null,\n *   next: null,\n *   something: 'whatever you like'\n * }\n */\nclass DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  insertBeginning(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.length++;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n  }\n\n  insertEnd(node) {\n    if (this.tail === null) {\n      this.insertBeginning(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n  }\n\n  insertAfter(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.length++;\n  }\n\n  insertBefore(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.length++;\n  }\n\n  remove(node) {\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    node.prev = null;\n    node.next = null;\n    this.length--;\n  }\n\n  // FIXME: this should not live here and has become a dumping ground...\n  static createNode(data) {\n    return {\n      prev: null,\n      next: null,\n      data: data\n    };\n  }\n}\n\nmodule.exports = DoublyLinkedList;\n","\"use strict\";\n\nconst DoublyLinkedListIterator = require(\"./DoublyLinkedListIterator\");\n/**\n * Thin wrapper around an underlying DDL iterator\n */\nclass DequeIterator extends DoublyLinkedListIterator {\n  next() {\n    const result = super.next();\n\n    // unwrap the node...\n    if (result.value) {\n      result.value = result.value.data;\n    }\n\n    return result;\n  }\n}\n\nmodule.exports = DequeIterator;\n","\"use strict\";\n\nconst Queue = require(\"./Queue\");\n\n/**\n * @class\n * @private\n */\nclass PriorityQueue {\n  constructor(size) {\n    this._size = Math.max(+size | 0, 1);\n    /** @type {Queue[]} */\n    this._slots = [];\n    // initialize arrays to hold queue elements\n    for (let i = 0; i < this._size; i++) {\n      this._slots.push(new Queue());\n    }\n  }\n\n  get length() {\n    let _length = 0;\n    for (let i = 0, slots = this._slots.length; i < slots; i++) {\n      _length += this._slots[i].length;\n    }\n    return _length;\n  }\n\n  enqueue(obj, priority) {\n    // Convert to integer with a default value of 0.\n    priority = (priority && +priority | 0) || 0;\n\n    if (priority) {\n      if (priority < 0 || priority >= this._size) {\n        priority = this._size - 1;\n        // put obj at the end of the line\n      }\n    }\n    this._slots[priority].push(obj);\n  }\n\n  dequeue() {\n    for (let i = 0, sl = this._slots.length; i < sl; i += 1) {\n      if (this._slots[i].length) {\n        return this._slots[i].shift();\n      }\n    }\n    return;\n  }\n\n  get head() {\n    for (let i = 0, sl = this._slots.length; i < sl; i += 1) {\n      if (this._slots[i].length > 0) {\n        return this._slots[i].head;\n      }\n    }\n    return;\n  }\n\n  get tail() {\n    for (let i = this._slots.length - 1; i >= 0; i--) {\n      if (this._slots[i].length > 0) {\n        return this._slots[i].tail;\n      }\n    }\n    return;\n  }\n}\n\nmodule.exports = PriorityQueue;\n","const FilterError = require('./errors/filter');\nconst Model = require('./model');\nconst compose = require('koa-compose');\n\nclass Schema {\n  constructor ({ name, fields = [], observers = [], modelClass = Model }) {\n    if (!name) {\n      throw new Error('Schema name is required');\n    }\n\n    this.name = name;\n    this.fields = fields;\n    this.observers = observers;\n    this.modelClass = modelClass;\n  }\n\n  attach (row = {}) {\n    let Model = this.modelClass;\n\n    this.fields.forEach(field => {\n      if (row[field.name] === undefined || row[field.name] === null) {\n        row[field.name] = null;\n      } else {\n        row[field.name] = field.attach(row[field.name]);\n      }\n    });\n\n    return new Model(row);\n  }\n\n  observe (ctx, next) {\n    if (!this._observerRunner) {\n      let units = this.observers.map(observer => {\n        return (ctx, next) => {\n          if (typeof observer[ctx.query.mode] !== 'function') {\n            return next();\n          }\n          return observer[ctx.query.mode](ctx, next);\n        };\n      });\n\n      this._observerRunner = compose(units);\n    }\n\n    return this._observerRunner(ctx, next);\n  }\n\n  async filter (row, { session, partial = false }) {\n    const error = new FilterError();\n\n    if (!row) {\n      error.add(new Error('Cannot filter empty row'));\n      throw error;\n    }\n\n    await Promise.all(this.fields.map(async field => {\n      try {\n        if (partial && row[field.name] === undefined) {\n          return;\n        }\n\n        row[field.name] = await field.execFilter(row[field.name], { session, row });\n      } catch (err) {\n        err.field = field;\n        error.add(err);\n      }\n    }));\n\n    if (!error.empty()) {\n      throw error;\n    }\n\n    return row;\n  }\n}\n\nmodule.exports = Schema;\n","class Model {\n  constructor (row) {\n    for (let key in row) {\n      if (!row.hasOwnProperty(key) || row[key] === undefined) {\n        continue;\n      }\n\n      this[key] = row[key];\n    }\n  }\n}\n\nmodule.exports = Model;\n","class Query {\n  constructor ({ session, schema, criteria }) {\n    this.session = session;\n\n    [ this.connection, this.schema ] = this.session.parseSchema(schema);\n\n    this.find(criteria);\n\n    this.rows = [];\n    this.sets = {};\n    this.length = -1;\n    this.offset = 0;\n    this.sorts = undefined;\n  }\n\n  find (criteria = {}) {\n    this.criteria = typeof criteria === 'object' ? criteria : { id: criteria };\n\n    return this;\n  }\n\n  insert (row) {\n    this.mode = 'insert';\n    this.rows.push(this.schema.attach(row));\n\n    return this;\n  }\n\n  sort (sorts) {\n    this.sorts = sorts;\n\n    return this;\n  }\n\n  limit (length) {\n    this.length = length;\n\n    return this;\n  }\n\n  skip (offset) {\n    this.offset = offset;\n\n    return this;\n  }\n\n  set (set) {\n    this.mode = 'update';\n    this.sets = this.schema.attach(set);\n\n    return this;\n  }\n\n  async delete ({ observer = true } = {}) {\n    this.mode = 'delete';\n\n    let ctx = { query: this };\n\n    if (observer) {\n      await this.schema.observe(ctx, ctx => this._delete(ctx));\n    } else {\n      await this._delete(ctx);\n    }\n\n    return ctx.result;\n  }\n\n  async _delete () {\n    const connection = await this.session.acquire(this.connection);\n    let result = await connection.delete(this);\n    return result;\n  }\n\n  async save ({ filter = true, observer = true } = {}) {\n    let ctx = { query: this, filter };\n\n    if (observer) {\n      await this.schema.observe(ctx, ctx => this._save(ctx));\n    } else {\n      await this._save(ctx);\n    }\n\n    return this;\n  }\n\n  async _save (ctx) {\n    const connection = await this.session.acquire(this.connection);\n    let { session } = this;\n    let { filter } = ctx;\n\n    if (this.rows.length) {\n      if (filter) {\n        await Promise.all(this.rows.map(row => this.schema.filter(row, { session })));\n      }\n\n      let rows = [];\n      this.affected = await connection.insert(this, row => rows.push(this.schema.attach(row)));\n      this.rows = rows;\n    } else {\n      if (filter) {\n        let partial = true;\n        await this.schema.filter(this.sets, { session, partial });\n      }\n\n      this.affected = await connection.update(this);\n    }\n  }\n\n  async drop () {\n    const connection = await this.session.acquire(this.connection);\n    let result = await connection.drop(this);\n    return result;\n  }\n\n  async truncate () {\n    const connection = await this.session.acquire(this.connection);\n    let result = await connection.truncate(this);\n    return result;\n  }\n\n  async all () {\n    let rows = [];\n    const connection = await this.session.acquire(this.connection);\n    await connection.load(this, row => rows.push(this.schema.attach(row)));\n    return rows;\n  }\n\n  async count (useSkipAndLimit = false) {\n    const connection = await this.session.acquire(this.connection);\n    if (typeof connection.count !== 'function') {\n      throw new Error('Connection does not implement method count');\n    }\n    return connection.count(this, useSkipAndLimit);\n  }\n\n  async single () {\n    let [ row ] = await this.limit(1).all();\n    return row;\n  }\n\n  getInsertedRows () {\n    return this.rows;\n  }\n}\n\nmodule.exports = Query;\n","let filters = {};\n\nclass Filter {\n  static get (signature) {\n    let signatureType = typeof signature;\n    let err = new Error(`Unimplemented get filter by ${signatureType}`);\n    let fn = '';\n    let args = [];\n\n    switch (signatureType) {\n      case 'string':\n        signature = signature.split(':');\n        [ fn, ...args ] = signature;\n        args = args.join(':').split(',');\n        break;\n      case 'object':\n        if (!Array.isArray(signature)) {\n          throw err;\n        }\n\n        signatureType = 'array';\n        [ fn, ...args ] = signature;\n        break;\n      case 'function':\n        return signature;\n      default:\n        throw err;\n    }\n\n    if (fn in filters === false) {\n      try {\n        filters[fn] = require('./filters/' + fn);\n      } catch (err) {\n        filters[fn] = null;\n      }\n    }\n\n    if (!filters[fn]) {\n      let normalizedSignature = 'unknown';\n      try {\n        normalizedSignature = JSON.stringify(signature);\n      } catch (err) {\n        // noop\n      }\n      throw new Error(`Filter ${fn} not found <${signatureType}(${normalizedSignature})>`);\n    }\n\n    return filters[fn](...args);\n  }\n\n  static put (name, filter) {\n    filters[name] = filter;\n  }\n\n  static reset () {\n    filters = {};\n  }\n}\n\nmodule.exports = Filter;\n","module.exports = function (schema) {\n  return async function (value = null, { session, field: { name } }) {\n    if (value === null) {\n      return value;\n    }\n\n    let err = new Error(`Field ${name} values must be ${schema}`);\n\n    if (!Array.isArray(value)) {\n      throw err;\n    }\n\n    try {\n      let schemaO = session.getSchema(schema);\n      await Promise.all(value.map(row => schemaO.filter(row, { session })));\n      value = value.map(row => schemaO.attach(row));\n    } catch (err) {\n      console.error(`Caught error at nested model, ${err.stack}`);\n      throw new Error(`Field ${name} must be compatible to '${schema}'`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function def (defaultValue) {\n  return function (value = null) {\n    if (value === null) {\n      return defaultValue;\n    }\n\n    return value;\n  };\n};\n","module.exports = function email () {\n  return function (value = null, { field: { name } }) {\n    if (value === null) {\n      return value;\n    }\n\n    value = value.toLowerCase();\n\n    let err = new Error(`Field ${name} must be valid email`);\n\n    const parts = value.split('@');\n\n    if (parts.length !== 2) {\n      throw err;\n    }\n\n    const domain = parts.pop();\n    let user = parts.join('@');\n\n    if (domain === 'gmail.com' || domain === 'googlemail.com') {\n      user = user.replace(/\\./g, '').toLowerCase();\n    }\n\n    if (user.length > 64 || domain.length > 256) {\n      throw err;\n    }\n\n    return value;\n  };\n};\n","module.exports = function (...enums) {\n  return function (value = null, { field: { name } }) {\n    if (value === null) {\n      return value;\n    }\n\n    if (enums.indexOf(value) === -1) {\n      throw new Error(`Field ${name} out of enum range`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function exists (schema, key = 'id') {\n  return async function (value, { session, field: { name } }) {\n    if (!value) {\n      return;\n    }\n\n    let criteria = {};\n    criteria[key] = value;\n\n    if (!(await session.factory(schema, criteria).single())) {\n      throw new Error(`Field ${name} must be exists`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function notEmpty () {\n  return function (value, { field: { name } }) {\n    if (!value || (Array.isArray(value) && value.length)) {\n      throw new Error(`Field ${name} must not empty`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function required () {\n  return function (value = null, { field: { name = 'unknown' } }) {\n    if (value === null || value === '') {\n      throw new Error(`Field ${name} is required`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function requiredIf (key, expected) {\n  return function (value = null, { session, row, field: { name = 'unknown' } }) {\n    if (row[key] === expected && value === null) {\n      throw new Error(`Field ${name} is required`);\n    }\n\n    return value;\n  };\n};\n","module.exports = function unique (schema) {\n  return async function (value, { row, session, field: { name } }) {\n    let criteria = {};\n    criteria[name] = value;\n\n    let foundRow = await session.factory(schema, criteria).single();\n    if (foundRow && foundRow.id !== row.id) {\n      throw new Error(`Field ${name} already exists`);\n    }\n\n    return value;\n  };\n};\n","const Manager = require('./manager');\nconst Filter = require('./filter');\nconst Connection = require('./connection');\nconst Pool = require('./pool');\nconst Model = require('./model');\nconst Schema = require('./schema');\nconst schemas = require('./schemas');\nconst Query = require('./query');\n\nconst lib = {\n  Manager,\n  Connection,\n  Model,\n  Pool,\n  Query,\n  Filter,\n  Schema,\n  schemas,\n};\n\nif (typeof window !== 'undefined') {\n  window.norm = lib;\n}\n\nmodule.exports = lib;\n","const Pool = require('./pool');\nconst Session = require('./session');\n\nclass Manager {\n  static adapter (ctr) {\n    if (typeof ctr === 'function') {\n      return ctr;\n    }\n\n    throw new Error('Adapter must be a constructor');\n  }\n\n  constructor ({ connections = [] } = {}) {\n    this.pools = {};\n    this.main = '';\n\n    connections.forEach(connection => this.putPool(connection));\n  }\n\n  putPool (config) {\n    // resolve adapter first before creating\n    config.adapter = Manager.adapter(config.adapter);\n\n    let pool = new Pool(config);\n    this.pools[pool.name] = pool;\n    this.main = config.main ? pool.name : (this.main || pool.name);\n\n    return this;\n  }\n\n  /**\n   * Getter pool\n   *\n   * @param {string} name\n   * @returns {Pool}\n   */\n  getPool (name) {\n    if (this.main === '') {\n      this.putPool({});\n    }\n\n    name = `${name || this.main}`;\n    if (!this.pools[name]) {\n      throw new Error(`Pool '${name}' not found`);\n    }\n\n    return this.pools[name];\n  }\n\n  async runSession (fn, options) {\n    const session = this.openSession(options);\n    try {\n      const result = await fn(session);\n      await session.close();\n      await session.dispose();\n      return result;\n    } catch (err) {\n      await session.dispose();\n      throw err;\n    }\n  }\n\n  openSession (options) {\n    return new Session({ manager: this });\n  }\n}\n\nmodule.exports = Manager;\n","const Pool = require(\"./lib/Pool\");\nconst Deque = require(\"./lib/Deque\");\nconst PriorityQueue = require(\"./lib/PriorityQueue\");\nconst DefaultEvictor = require(\"./lib/DefaultEvictor\");\nmodule.exports = {\n  Pool: Pool,\n  Deque: Deque,\n  PriorityQueue: PriorityQueue,\n  DefaultEvictor: DefaultEvictor,\n  createPool: function(factory, config) {\n    return new Pool(DefaultEvictor, Deque, PriorityQueue, factory, config);\n  }\n};\n","\"use strict\";\n\nconst EventEmitter = require(\"events\").EventEmitter;\n\nconst factoryValidator = require(\"./factoryValidator\");\nconst PoolOptions = require(\"./PoolOptions\");\nconst ResourceRequest = require(\"./ResourceRequest\");\nconst ResourceLoan = require(\"./ResourceLoan\");\nconst PooledResource = require(\"./PooledResource\");\nconst DefaultEvictor = require(\"./DefaultEvictor\");\nconst Deque = require(\"./Deque\");\nconst Deferred = require(\"./Deferred\");\nconst PriorityQueue = require(\"./PriorityQueue\");\nconst DequeIterator = require(\"./DequeIterator\");\n\nconst reflector = require(\"./utils\").reflector;\n\n/**\n * TODO: move me\n */\nconst FACTORY_CREATE_ERROR = \"factoryCreateError\";\nconst FACTORY_DESTROY_ERROR = \"factoryDestroyError\";\n\nclass Pool extends EventEmitter {\n  /**\n   * Generate an Object pool with a specified `factory` and `config`.\n   *\n   * @param {typeof DefaultEvictor} Evictor\n   * @param {typeof Deque} Deque\n   * @param {typeof PriorityQueue} PriorityQueue\n   * @param {Object} factory\n   *   Factory to be used for generating and destroying the items.\n   * @param {Function} factory.create\n   *   Should create the item to be acquired,\n   *   and call it's first callback argument with the generated item as it's argument.\n   * @param {Function} factory.destroy\n   *   Should gently close any resources that the item is using.\n   *   Called before the items is destroyed.\n   * @param {Function} factory.validate\n   *   Test if a resource is still valid .Should return a promise that resolves to a boolean, true if resource is still valid and false\n   *   If it should be removed from pool.\n   * @param {Object} options\n   */\n  constructor(Evictor, Deque, PriorityQueue, factory, options) {\n    super();\n\n    factoryValidator(factory);\n\n    this._config = new PoolOptions(options);\n\n    // TODO: fix up this ugly glue-ing\n    this._Promise = this._config.Promise;\n\n    this._factory = factory;\n    this._draining = false;\n    this._started = false;\n    /**\n     * Holds waiting clients\n     * @type {PriorityQueue}\n     */\n    this._waitingClientsQueue = new PriorityQueue(this._config.priorityRange);\n\n    /**\n     * Collection of promises for resource creation calls made by the pool to factory.create\n     * @type {Set}\n     */\n    this._factoryCreateOperations = new Set();\n\n    /**\n     * Collection of promises for resource destruction calls made by the pool to factory.destroy\n     * @type {Set}\n     */\n    this._factoryDestroyOperations = new Set();\n\n    /**\n     * A queue/stack of pooledResources awaiting acquisition\n     * TODO: replace with LinkedList backed array\n     * @type {Deque}\n     */\n    this._availableObjects = new Deque();\n\n    /**\n     * Collection of references for any resource that are undergoing validation before being acquired\n     * @type {Set}\n     */\n    this._testOnBorrowResources = new Set();\n\n    /**\n     * Collection of references for any resource that are undergoing validation before being returned\n     * @type {Set}\n     */\n    this._testOnReturnResources = new Set();\n\n    /**\n     * Collection of promises for any validations currently in process\n     * @type {Set}\n     */\n    this._validationOperations = new Set();\n\n    /**\n     * All objects associated with this pool in any state (except destroyed)\n     * @type {Set}\n     */\n    this._allObjects = new Set();\n\n    /**\n     * Loans keyed by the borrowed resource\n     * @type {Map}\n     */\n    this._resourceLoans = new Map();\n\n    /**\n     * Infinitely looping iterator over available object\n     * @type {DequeIterator}\n     */\n    this._evictionIterator = this._availableObjects.iterator();\n\n    this._evictor = new Evictor();\n\n    /**\n     * handle for setTimeout for next eviction run\n     * @type {(number|null)}\n     */\n    this._scheduledEviction = null;\n\n    // create initial resources (if factory.min > 0)\n    if (this._config.autostart === true) {\n      this.start();\n    }\n  }\n\n  _destroy(pooledResource) {\n    // FIXME: do we need another state for \"in destruction\"?\n    pooledResource.invalidate();\n    this._allObjects.delete(pooledResource);\n    // NOTE: this maybe very bad promise usage?\n    const destroyPromise = this._factory.destroy(pooledResource.obj);\n    const wrappedDestroyPromise = this._Promise.resolve(destroyPromise);\n\n    this._trackOperation(\n      wrappedDestroyPromise,\n      this._factoryDestroyOperations\n    ).catch(reason => {\n      this.emit(FACTORY_DESTROY_ERROR, reason);\n    });\n\n    // TODO: maybe ensuring minimum pool size should live outside here\n    this._ensureMinimum();\n  }\n\n  /**\n   * Attempt to move an available resource into test and then onto a waiting client\n   * @return {Boolean} could we move an available resource into test\n   */\n  _testOnBorrow() {\n    if (this._availableObjects.length < 1) {\n      return false;\n    }\n\n    const pooledResource = this._availableObjects.shift();\n    // Mark the resource as in test\n    pooledResource.test();\n    this._testOnBorrowResources.add(pooledResource);\n    const validationPromise = this._factory.validate(pooledResource.obj);\n    const wrappedValidationPromise = this._Promise.resolve(validationPromise);\n\n    this._trackOperation(\n      wrappedValidationPromise,\n      this._validationOperations\n    ).then(isValid => {\n      this._testOnBorrowResources.delete(pooledResource);\n\n      if (isValid === false) {\n        pooledResource.invalidate();\n        this._destroy(pooledResource);\n        this._dispense();\n        return;\n      }\n      this._dispatchPooledResourceToNextWaitingClient(pooledResource);\n    });\n\n    return true;\n  }\n\n  /**\n   * Attempt to move an available resource to a waiting client\n   * @return {Boolean} [description]\n   */\n  _dispatchResource() {\n    if (this._availableObjects.length < 1) {\n      return false;\n    }\n\n    const pooledResource = this._availableObjects.shift();\n    this._dispatchPooledResourceToNextWaitingClient(pooledResource);\n    return false;\n  }\n\n  /**\n   * Attempt to resolve an outstanding resource request using an available resource from\n   * the pool, or creating new ones\n   *\n   * @private\n   */\n  _dispense() {\n    /**\n     * Local variables for ease of reading/writing\n     * these don't (shouldn't) change across the execution of this fn\n     */\n    const numWaitingClients = this._waitingClientsQueue.length;\n\n    // If there aren't any waiting requests then there is nothing to do\n    // so lets short-circuit\n    if (numWaitingClients < 1) {\n      return;\n    }\n\n    const resourceShortfall =\n      numWaitingClients - this._potentiallyAllocableResourceCount;\n\n    const actualNumberOfResourcesToCreate = Math.min(\n      this.spareResourceCapacity,\n      resourceShortfall\n    );\n    for (let i = 0; actualNumberOfResourcesToCreate > i; i++) {\n      this._createResource();\n    }\n\n    // If we are doing test-on-borrow see how many more resources need to be moved into test\n    // to help satisfy waitingClients\n    if (this._config.testOnBorrow === true) {\n      // how many available resources do we need to shift into test\n      const desiredNumberOfResourcesToMoveIntoTest =\n        numWaitingClients - this._testOnBorrowResources.size;\n      const actualNumberOfResourcesToMoveIntoTest = Math.min(\n        this._availableObjects.length,\n        desiredNumberOfResourcesToMoveIntoTest\n      );\n      for (let i = 0; actualNumberOfResourcesToMoveIntoTest > i; i++) {\n        this._testOnBorrow();\n      }\n    }\n\n    // if we aren't testing-on-borrow then lets try to allocate what we can\n    if (this._config.testOnBorrow === false) {\n      const actualNumberOfResourcesToDispatch = Math.min(\n        this._availableObjects.length,\n        numWaitingClients\n      );\n      for (let i = 0; actualNumberOfResourcesToDispatch > i; i++) {\n        this._dispatchResource();\n      }\n    }\n  }\n\n  /**\n   * Dispatches a pooledResource to the next waiting client (if any) else\n   * puts the PooledResource back on the available list\n   * @param  {PooledResource} pooledResource [description]\n   * @return {Boolean}                [description]\n   */\n  _dispatchPooledResourceToNextWaitingClient(pooledResource) {\n    const clientResourceRequest = this._waitingClientsQueue.dequeue();\n    if (\n      clientResourceRequest === undefined ||\n      clientResourceRequest.state !== Deferred.PENDING\n    ) {\n      // While we were away either all the waiting clients timed out\n      // or were somehow fulfilled. put our pooledResource back.\n      this._addPooledResourceToAvailableObjects(pooledResource);\n      // TODO: do need to trigger anything before we leave?\n      return false;\n    }\n    const loan = new ResourceLoan(pooledResource, this._Promise);\n    this._resourceLoans.set(pooledResource.obj, loan);\n    pooledResource.allocate();\n    clientResourceRequest.resolve(pooledResource.obj);\n    return true;\n  }\n\n  /**\n   * tracks on operation using given set\n   * handles adding/removing from the set and resolve/rejects the value/reason\n   * @param  {Promise} operation\n   * @param  {Set} set       Set holding operations\n   * @return {Promise}       Promise that resolves once operation has been removed from set\n   */\n  _trackOperation(operation, set) {\n    set.add(operation);\n\n    return operation.then(\n      v => {\n        set.delete(operation);\n        return this._Promise.resolve(v);\n      },\n      e => {\n        set.delete(operation);\n        return this._Promise.reject(e);\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createResource() {\n    // An attempt to create a resource\n    const factoryPromise = this._factory.create();\n    const wrappedFactoryPromise = this._Promise.resolve(factoryPromise);\n\n    this._trackOperation(wrappedFactoryPromise, this._factoryCreateOperations)\n      .then(resource => {\n        this._handleNewResource(resource);\n        return null;\n      })\n      .catch(reason => {\n        this.emit(FACTORY_CREATE_ERROR, reason);\n        this._dispense();\n      });\n  }\n\n  _handleNewResource(resource) {\n    const pooledResource = new PooledResource(resource);\n    this._allObjects.add(pooledResource);\n    // TODO: check we aren't exceding our maxPoolSize before doing\n    this._dispatchPooledResourceToNextWaitingClient(pooledResource);\n  }\n\n  /**\n   * @private\n   */\n  _ensureMinimum() {\n    if (this._draining === true) {\n      return;\n    }\n    const minShortfall = this._config.min - this._count;\n    for (let i = 0; i < minShortfall; i++) {\n      this._createResource();\n    }\n  }\n\n  _evict() {\n    const testsToRun = Math.min(\n      this._config.numTestsPerEvictionRun,\n      this._availableObjects.length\n    );\n    const evictionConfig = {\n      softIdleTimeoutMillis: this._config.softIdleTimeoutMillis,\n      idleTimeoutMillis: this._config.idleTimeoutMillis,\n      min: this._config.min\n    };\n    for (let testsHaveRun = 0; testsHaveRun < testsToRun; ) {\n      const iterationResult = this._evictionIterator.next();\n\n      // Safety check incase we could get stuck in infinite loop because we\n      // somehow emptied the array after chekcing it's length\n      if (iterationResult.done === true && this._availableObjects.length < 1) {\n        this._evictionIterator.reset();\n        return;\n      }\n      // if this happens it should just mean we reached the end of the\n      // list and can reset the cursor.\n      if (iterationResult.done === true && this._availableObjects.length > 0) {\n        this._evictionIterator.reset();\n        break;\n      }\n\n      const resource = iterationResult.value;\n\n      const shouldEvict = this._evictor.evict(\n        evictionConfig,\n        resource,\n        this._availableObjects.length\n      );\n      testsHaveRun++;\n\n      if (shouldEvict === true) {\n        // take it out of the _availableObjects list\n        this._evictionIterator.remove();\n        this._destroy(resource);\n      }\n    }\n  }\n\n  _scheduleEvictorRun() {\n    // Start eviction if set\n    if (this._config.evictionRunIntervalMillis > 0) {\n      // @ts-ignore\n      this._scheduledEviction = setTimeout(() => {\n        this._evict();\n        this._scheduleEvictorRun();\n      }, this._config.evictionRunIntervalMillis);\n    }\n  }\n\n  _descheduleEvictorRun() {\n    if (this._scheduledEviction) {\n      clearTimeout(this._scheduledEviction);\n    }\n    this._scheduledEviction = null;\n  }\n\n  start() {\n    if (this._draining === true) {\n      return;\n    }\n    if (this._started === true) {\n      return;\n    }\n    this._started = true;\n    this._scheduleEvictorRun();\n    this._ensureMinimum();\n  }\n\n  /**\n   * Request a new resource. The callback will be called,\n   * when a new resource is available, passing the resource to the callback.\n   * TODO: should we add a seperate \"acquireWithPriority\" function\n   *\n   * @param {Number} [priority=0]\n   *   Optional.  Integer between 0 and (priorityRange - 1).  Specifies the priority\n   *   of the caller if there are no available resources.  Lower numbers mean higher\n   *   priority.\n   *\n   * @returns {Promise}\n   */\n  acquire(priority) {\n    if (this._started === false && this._config.autostart === false) {\n      this.start();\n    }\n\n    if (this._draining) {\n      return this._Promise.reject(\n        new Error(\"pool is draining and cannot accept work\")\n      );\n    }\n\n    // TODO: should we defer this check till after this event loop incase \"the situation\" changes in the meantime\n    if (\n      this._config.maxWaitingClients !== undefined &&\n      this._waitingClientsQueue.length >= this._config.maxWaitingClients\n    ) {\n      return this._Promise.reject(\n        new Error(\"max waitingClients count exceeded\")\n      );\n    }\n\n    const resourceRequest = new ResourceRequest(\n      this._config.acquireTimeoutMillis,\n      this._Promise\n    );\n    this._waitingClientsQueue.enqueue(resourceRequest, priority);\n    this._dispense();\n\n    return resourceRequest.promise;\n  }\n\n  /**\n   * [use method, aquires a resource, passes the resource to a user supplied function and releases it]\n   * @param  {Function} fn [a function that accepts a resource and returns a promise that resolves/rejects once it has finished using the resource]\n   * @return {Promise}      [resolves once the resource is released to the pool]\n   */\n  use(fn) {\n    return this.acquire().then(resource => {\n      return fn(resource).then(\n        result => {\n          this.release(resource);\n          return result;\n        },\n        err => {\n          this.release(resource);\n          throw err;\n        }\n      );\n    });\n  }\n\n  /**\n   * Check if resource is currently on loan from the pool\n   *\n   * @param {Function} resource\n   *    Resource for checking.\n   *\n   * @returns {Boolean}\n   *  True if resource belongs to this pool and false otherwise\n   */\n  isBorrowedResource(resource) {\n    return this._resourceLoans.get(resource) !== undefined;\n  }\n\n  /**\n   * Return the resource to the pool when it is no longer required.\n   *\n   * @param {Object} resource\n   *   The acquired object to be put back to the pool.\n   */\n  release(resource) {\n    // check for an outstanding loan\n    const loan = this._resourceLoans.get(resource);\n\n    if (loan === undefined) {\n      return this._Promise.reject(\n        new Error(\"Resource not currently part of this pool\")\n      );\n    }\n\n    this._resourceLoans.delete(resource);\n    loan.resolve();\n    const pooledResource = loan.pooledResource;\n\n    pooledResource.deallocate();\n    this._addPooledResourceToAvailableObjects(pooledResource);\n\n    this._dispense();\n    return this._Promise.resolve();\n  }\n\n  /**\n   * Request the resource to be destroyed. The factory's destroy handler\n   * will also be called.\n   *\n   * This should be called within an acquire() block as an alternative to release().\n   *\n   * @param {Object} resource\n   *   The acquired resource to be destoyed.\n   */\n  destroy(resource) {\n    // check for an outstanding loan\n    const loan = this._resourceLoans.get(resource);\n\n    if (loan === undefined) {\n      return this._Promise.reject(\n        new Error(\"Resource not currently part of this pool\")\n      );\n    }\n\n    this._resourceLoans.delete(resource);\n    loan.resolve();\n    const pooledResource = loan.pooledResource;\n\n    pooledResource.deallocate();\n    this._destroy(pooledResource);\n\n    this._dispense();\n    return this._Promise.resolve();\n  }\n\n  _addPooledResourceToAvailableObjects(pooledResource) {\n    pooledResource.idle();\n    if (this._config.fifo === true) {\n      this._availableObjects.push(pooledResource);\n    } else {\n      this._availableObjects.unshift(pooledResource);\n    }\n  }\n\n  /**\n   * Disallow any new acquire calls and let the request backlog dissapate.\n   * The Pool will no longer attempt to maintain a \"min\" number of resources\n   * and will only make new resources on demand.\n   * Resolves once all resource requests are fulfilled and all resources are returned to pool and available...\n   * Should probably be called \"drain work\"\n   * @returns {Promise}\n   */\n  drain() {\n    this._draining = true;\n    return this.__allResourceRequestsSettled()\n      .then(() => {\n        return this.__allResourcesReturned();\n      })\n      .then(() => {\n        this._descheduleEvictorRun();\n      });\n  }\n\n  __allResourceRequestsSettled() {\n    if (this._waitingClientsQueue.length > 0) {\n      // wait for last waiting client to be settled\n      // FIXME: what if they can \"resolve\" out of order....?\n      return reflector(this._waitingClientsQueue.tail.promise);\n    }\n    return this._Promise.resolve();\n  }\n\n  // FIXME: this is a horrific mess\n  __allResourcesReturned() {\n    const ps = Array.from(this._resourceLoans.values())\n      .map(loan => loan.promise)\n      .map(reflector);\n    return this._Promise.all(ps);\n  }\n\n  /**\n   * Forcibly destroys all available resources regardless of timeout.  Intended to be\n   * invoked as part of a drain.  Does not prevent the creation of new\n   * resources as a result of subsequent calls to acquire.\n   *\n   * Note that if factory.min > 0 and the pool isn't \"draining\", the pool will destroy all idle resources\n   * in the pool, but replace them with newly created resources up to the\n   * specified factory.min value.  If this is not desired, set factory.min\n   * to zero before calling clear()\n   *\n   */\n  clear() {\n    const reflectedCreatePromises = Array.from(\n      this._factoryCreateOperations\n    ).map(reflector);\n\n    // wait for outstanding factory.create to complete\n    return this._Promise.all(reflectedCreatePromises).then(() => {\n      // Destroy existing resources\n      // @ts-ignore\n      for (const resource of this._availableObjects) {\n        this._destroy(resource);\n      }\n      const reflectedDestroyPromises = Array.from(\n        this._factoryDestroyOperations\n      ).map(reflector);\n      return this._Promise.all(reflectedDestroyPromises);\n    });\n  }\n\n  /**\n   * How many resources are available to allocated\n   * (includes resources that have not been tested and may faul validation)\n   * NOTE: internal for now as the name is awful and might not be useful to anyone\n   * @return {Number} number of resources the pool has to allocate\n   */\n  get _potentiallyAllocableResourceCount() {\n    return (\n      this._availableObjects.length +\n      this._testOnBorrowResources.size +\n      this._testOnReturnResources.size +\n      this._factoryCreateOperations.size\n    );\n  }\n\n  /**\n   * The combined count of the currently created objects and those in the\n   * process of being created\n   * Does NOT include resources in the process of being destroyed\n   * sort of legacy...\n   * @return {Number}\n   */\n  get _count() {\n    return this._allObjects.size + this._factoryCreateOperations.size;\n  }\n\n  /**\n   * How many more resources does the pool have room for\n   * @return {Number} number of resources the pool could create before hitting any limits\n   */\n  get spareResourceCapacity() {\n    return (\n      this._config.max -\n      (this._allObjects.size + this._factoryCreateOperations.size)\n    );\n  }\n\n  /**\n   * see _count above\n   * @return {Number} [description]\n   */\n  get size() {\n    return this._count;\n  }\n\n  /**\n   * number of available resources\n   * @return {Number} [description]\n   */\n  get available() {\n    return this._availableObjects.length;\n  }\n\n  /**\n   * number of resources that are currently acquired\n   * @return {Number} [description]\n   */\n  get borrowed() {\n    return this._resourceLoans.size;\n  }\n\n  /**\n   * number of waiting acquire calls\n   * @return {Number} [description]\n   */\n  get pending() {\n    return this._waitingClientsQueue.length;\n  }\n\n  /**\n   * maximum size of the pool\n   * @return {Number} [description]\n   */\n  get max() {\n    return this._config.max;\n  }\n\n  /**\n   * minimum size of the pool\n   * @return {Number} [description]\n   */\n  get min() {\n    return this._config.min;\n  }\n}\n\nmodule.exports = Pool;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","module.exports = function(factory) {\n  if (typeof factory.create !== \"function\") {\n    throw new TypeError(\"factory.create must be a function\");\n  }\n\n  if (typeof factory.destroy !== \"function\") {\n    throw new TypeError(\"factory.destroy must be a function\");\n  }\n\n  if (\n    typeof factory.validate !== \"undefined\" &&\n    typeof factory.validate !== \"function\"\n  ) {\n    throw new TypeError(\"factory.validate must be a function\");\n  }\n};\n","\"use strict\";\n\nconst PoolDefaults = require(\"./PoolDefaults\");\n\nclass PoolOptions {\n  /**\n   * @param {Object} opts\n   *   configuration for the pool\n   * @param {Number} [opts.max=null]\n   *   Maximum number of items that can exist at the same time.  Default: 1.\n   *   Any further acquire requests will be pushed to the waiting list.\n   * @param {Number} [opts.min=null]\n   *   Minimum number of items in pool (including in-use). Default: 0.\n   *   When the pool is created, or a resource destroyed, this minimum will\n   *   be checked. If the pool resource count is below the minimum, a new\n   *   resource will be created and added to the pool.\n   * @param {Number} [opts.maxWaitingClients=null]\n   *   maximum number of queued requests allowed after which acquire calls will be rejected\n   * @param {Boolean} [opts.testOnBorrow=false]\n   *   should the pool validate resources before giving them to clients. Requires that either\n   *   `factory.validate` or `factory.validateAsync` to be specified.\n   * @param {Boolean} [opts.testOnReturn=false]\n   *   should the pool validate resources before returning them to the pool.\n   * @param {Number} [opts.acquireTimeoutMillis=null]\n   *   Delay in milliseconds after which the an `acquire` call will fail. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} [opts.priorityRange=1]\n   *   The range from 1 to be treated as a valid priority\n   * @param {Boolean} [opts.fifo=true]\n   *   Sets whether the pool has LIFO (last in, first out) behaviour with respect to idle objects.\n   *   if false then pool has FIFO behaviour\n   * @param {Boolean} [opts.autostart=true]\n   *   Should the pool start creating resources etc once the constructor is called\n   * @param {Number} [opts.evictionRunIntervalMillis=0]\n   *   How often to run eviction checks.  Default: 0 (does not run).\n   * @param {Number} [opts.numTestsPerEvictionRun=3]\n   *   Number of resources to check each eviction run.  Default: 3.\n   * @param {Number} [opts.softIdleTimeoutMillis=-1]\n   *   amount of time an object may sit idle in the pool before it is eligible\n   *   for eviction by the idle object evictor (if any), with the extra condition\n   *   that at least \"min idle\" object instances remain in the pool. Default -1 (nothing can get evicted)\n   * @param {Number} [opts.idleTimeoutMillis=30000]\n   *   the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction\n   *   due to idle time. Supercedes \"softIdleTimeoutMillis\" Default: 30000\n   * @param {typeof Promise} [opts.Promise=Promise]\n   *   What promise implementation should the pool use, defaults to native promises.\n   */\n  constructor(opts) {\n    const poolDefaults = new PoolDefaults();\n\n    opts = opts || {};\n\n    this.fifo = typeof opts.fifo === \"boolean\" ? opts.fifo : poolDefaults.fifo;\n    this.priorityRange = opts.priorityRange || poolDefaults.priorityRange;\n\n    this.testOnBorrow =\n      typeof opts.testOnBorrow === \"boolean\"\n        ? opts.testOnBorrow\n        : poolDefaults.testOnBorrow;\n    this.testOnReturn =\n      typeof opts.testOnReturn === \"boolean\"\n        ? opts.testOnReturn\n        : poolDefaults.testOnReturn;\n\n    this.autostart =\n      typeof opts.autostart === \"boolean\"\n        ? opts.autostart\n        : poolDefaults.autostart;\n\n    if (opts.acquireTimeoutMillis) {\n      // @ts-ignore\n      this.acquireTimeoutMillis = parseInt(opts.acquireTimeoutMillis, 10);\n    }\n\n    if (opts.maxWaitingClients) {\n      // @ts-ignore\n      this.maxWaitingClients = parseInt(opts.maxWaitingClients, 10);\n    }\n\n    // @ts-ignore\n    this.max = parseInt(opts.max, 10);\n    // @ts-ignore\n    this.min = parseInt(opts.min, 10);\n\n    this.max = Math.max(isNaN(this.max) ? 1 : this.max, 1);\n    this.min = Math.min(isNaN(this.min) ? 0 : this.min, this.max);\n\n    this.evictionRunIntervalMillis =\n      opts.evictionRunIntervalMillis || poolDefaults.evictionRunIntervalMillis;\n    this.numTestsPerEvictionRun =\n      opts.numTestsPerEvictionRun || poolDefaults.numTestsPerEvictionRun;\n    this.softIdleTimeoutMillis =\n      opts.softIdleTimeoutMillis || poolDefaults.softIdleTimeoutMillis;\n    this.idleTimeoutMillis =\n      opts.idleTimeoutMillis || poolDefaults.idleTimeoutMillis;\n\n    this.Promise = opts.Promise != null ? opts.Promise : poolDefaults.Promise;\n  }\n}\n\nmodule.exports = PoolOptions;\n","\"use strict\";\n/**\n * Create the default settings used by the pool\n *\n * @class\n */\nclass PoolDefaults {\n  constructor() {\n    this.fifo = true;\n    this.priorityRange = 1;\n\n    this.testOnBorrow = false;\n    this.testOnReturn = false;\n\n    this.autostart = true;\n\n    this.evictionRunIntervalMillis = 0;\n    this.numTestsPerEvictionRun = 3;\n    this.softIdleTimeoutMillis = -1;\n    this.idleTimeoutMillis = 30000;\n\n    // FIXME: no defaults!\n    this.acquireTimeoutMillis = null;\n    this.maxWaitingClients = null;\n\n    this.min = null;\n    this.max = null;\n    // FIXME: this seems odd?\n    this.Promise = Promise;\n  }\n}\n\nmodule.exports = PoolDefaults;\n","\"use strict\";\n\nconst Deferred = require(\"./Deferred\");\nconst errors = require(\"./errors\");\n\nfunction fbind(fn, ctx) {\n  return function bound() {\n    return fn.apply(ctx, arguments);\n  };\n}\n\n/**\n * Wraps a users request for a resource\n * Basically a promise mashed in with a timeout\n * @private\n */\nclass ResourceRequest extends Deferred {\n  /**\n   * [constructor description]\n   * @param  {Number} ttl     timeout\n   */\n  constructor(ttl, Promise) {\n    super(Promise);\n    this._creationTimestamp = Date.now();\n    this._timeout = null;\n\n    if (ttl !== undefined) {\n      this.setTimeout(ttl);\n    }\n  }\n\n  setTimeout(delay) {\n    if (this._state !== ResourceRequest.PENDING) {\n      return;\n    }\n    const ttl = parseInt(delay, 10);\n\n    if (isNaN(ttl) || ttl <= 0) {\n      throw new Error(\"delay must be a positive int\");\n    }\n\n    const age = Date.now() - this._creationTimestamp;\n\n    if (this._timeout) {\n      this.removeTimeout();\n    }\n\n    this._timeout = setTimeout(\n      fbind(this._fireTimeout, this),\n      Math.max(ttl - age, 0)\n    );\n  }\n\n  removeTimeout() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n    this._timeout = null;\n  }\n\n  _fireTimeout() {\n    this.reject(new errors.TimeoutError(\"ResourceRequest timed out\"));\n  }\n\n  reject(reason) {\n    this.removeTimeout();\n    super.reject(reason);\n  }\n\n  resolve(value) {\n    this.removeTimeout();\n    super.resolve(value);\n  }\n}\n\nmodule.exports = ResourceRequest;\n","\"use strict\";\n\nclass ExtendableError extends Error {\n  constructor(message) {\n    super(message);\n    // @ts-ignore\n    this.name = this.constructor.name;\n    this.message = message;\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n  }\n}\n\n/* eslint-disable no-useless-constructor */\nclass TimeoutError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n/* eslint-enable no-useless-constructor */\n\nmodule.exports = {\n  TimeoutError: TimeoutError\n};\n","\"use strict\";\n\nconst Deferred = require(\"./Deferred\");\n\n/**\n * Plan is to maybe add tracking via Error objects\n * and other fun stuff!\n */\n\nclass ResourceLoan extends Deferred {\n  /**\n   *\n   * @param  {any} pooledResource the PooledResource this loan belongs to\n   * @return {any}                [description]\n   */\n  constructor(pooledResource, Promise) {\n    super(Promise);\n    this._creationTimestamp = Date.now();\n    this.pooledResource = pooledResource;\n  }\n\n  reject() {\n    /**\n     * Loans can only be resolved at the moment\n     */\n  }\n}\n\nmodule.exports = ResourceLoan;\n","\"use strict\";\n\nconst PooledResourceStateEnum = require(\"./PooledResourceStateEnum\");\n\n/**\n * @class\n * @private\n */\nclass PooledResource {\n  constructor(resource) {\n    this.creationTime = Date.now();\n    this.lastReturnTime = null;\n    this.lastBorrowTime = null;\n    this.lastIdleTime = null;\n    this.obj = resource;\n    this.state = PooledResourceStateEnum.IDLE;\n  }\n\n  // mark the resource as \"allocated\"\n  allocate() {\n    this.lastBorrowTime = Date.now();\n    this.state = PooledResourceStateEnum.ALLOCATED;\n  }\n\n  // mark the resource as \"deallocated\"\n  deallocate() {\n    this.lastReturnTime = Date.now();\n    this.state = PooledResourceStateEnum.IDLE;\n  }\n\n  invalidate() {\n    this.state = PooledResourceStateEnum.INVALID;\n  }\n\n  test() {\n    this.state = PooledResourceStateEnum.VALIDATION;\n  }\n\n  idle() {\n    this.lastIdleTime = Date.now();\n    this.state = PooledResourceStateEnum.IDLE;\n  }\n\n  returning() {\n    this.state = PooledResourceStateEnum.RETURNING;\n  }\n}\n\nmodule.exports = PooledResource;\n","\"use strict\";\n\nconst PooledResourceStateEnum = {\n  ALLOCATED: \"ALLOCATED\", // In use\n  IDLE: \"IDLE\", // In the queue, not in use.\n  INVALID: \"INVALID\", // Failed validation\n  RETURNING: \"RETURNING\", // Resource is in process of returning\n  VALIDATION: \"VALIDATION\" // Currently being tested\n};\n\nmodule.exports = PooledResourceStateEnum;\n","\"use strict\";\n\n/**\n * Creates an interator for a DoublyLinkedList starting at the given node\n * It's internal cursor will remains relative to the last \"iterated\" node as that\n * node moves through the list until it either iterates to the end of the list,\n * or the the node it's tracking is removed from the list. Until the first 'next'\n * call it tracks the head/tail of the linked list. This means that one can create\n * an iterator on an empty list, then add nodes, and then the iterator will follow\n * those nodes. Because the DoublyLinkedList nodes don't track their owning \"list\" and\n * it's highly inefficient to walk the list for every iteration, the iterator won't know\n * if the node has been detached from one List and added to another list, or if the iterator\n *\n * The created object is an es6 compatible iterator\n */\nclass DoublyLinkedListIterator {\n  /**\n   * @param  {Object} doublyLinkedList     a node that is part of a doublyLinkedList\n   * @param  {Boolean} [reverse=false]     is this a reverse iterator? default: false\n   */\n  constructor(doublyLinkedList, reverse) {\n    this._list = doublyLinkedList;\n    // NOTE: these key names are tied to the DoublyLinkedListIterator\n    this._direction = reverse === true ? \"prev\" : \"next\";\n    this._startPosition = reverse === true ? \"tail\" : \"head\";\n    this._started = false;\n    this._cursor = null;\n    this._done = false;\n  }\n\n  _start() {\n    this._cursor = this._list[this._startPosition];\n    this._started = true;\n  }\n\n  _advanceCursor() {\n    if (this._started === false) {\n      this._started = true;\n      this._cursor = this._list[this._startPosition];\n      return;\n    }\n    this._cursor = this._cursor[this._direction];\n  }\n\n  reset() {\n    this._done = false;\n    this._started = false;\n    this._cursor = null;\n  }\n\n  remove() {\n    if (\n      this._started === false ||\n      this._done === true ||\n      this._isCursorDetached()\n    ) {\n      return false;\n    }\n    this._list.remove(this._cursor);\n  }\n\n  next() {\n    if (this._done === true) {\n      return { done: true };\n    }\n\n    this._advanceCursor();\n\n    // if there is no node at the cursor or the node at the cursor is no longer part of\n    // a doubly linked list then we are done/finished/kaput\n    if (this._cursor === null || this._isCursorDetached()) {\n      this._done = true;\n      return { done: true };\n    }\n\n    return {\n      value: this._cursor,\n      done: false\n    };\n  }\n\n  /**\n   * Is the node detached from a list?\n   * NOTE: you can trick/bypass/confuse this check by removing a node from one DoublyLinkedList\n   * and adding it to another.\n   * TODO: We can make this smarter by checking the direction of travel and only checking\n   * the required next/prev/head/tail rather than all of them\n   * @return {Boolean}      [description]\n   */\n  _isCursorDetached() {\n    return (\n      this._cursor.prev === null &&\n      this._cursor.next === null &&\n      this._list.tail !== this._cursor &&\n      this._list.head !== this._cursor\n    );\n  }\n}\n\nmodule.exports = DoublyLinkedListIterator;\n","\"use strict\";\n\nconst DoublyLinkedList = require(\"./DoublyLinkedList\");\nconst Deque = require(\"./Deque\");\n\n/**\n * Sort of a internal queue for holding the waiting\n * resource requets for a given \"priority\".\n * Also handles managing timeouts rejections on items (is this the best place for this?)\n * This is the last point where we know which queue a resourceRequest is in\n *\n */\nclass Queue extends Deque {\n  /**\n   * Adds the obj to the end of the list for this slot\n   * we completely override the parent method because we need access to the\n   * node for our rejection handler\n   * @param {any} resourceRequest [description]\n   */\n  push(resourceRequest) {\n    const node = DoublyLinkedList.createNode(resourceRequest);\n    resourceRequest.promise.catch(this._createTimeoutRejectionHandler(node));\n    this._list.insertEnd(node);\n  }\n\n  _createTimeoutRejectionHandler(node) {\n    return reason => {\n      if (reason.name === \"TimeoutError\") {\n        this._list.remove(node);\n      }\n    };\n  }\n}\n\nmodule.exports = Queue;\n","\"use strict\";\n\nfunction noop() {}\n\n/**\n * Reflects a promise but does not expose any\n * underlying value or rejection from that promise.\n * @param  {Promise} promise [description]\n * @return {Promise}         [description]\n */\nexports.reflector = function(promise) {\n  return promise.then(noop, noop);\n};\n","class Filter extends Error {\n  constructor () {\n    super();\n\n    this.status = 400;\n    this.children = [];\n  }\n\n  get message () {\n    return this.children.map(child => child.message).join(', ');\n  }\n\n  add (value) {\n    this.children.push(value);\n  }\n\n  empty () {\n    return this.children.length === 0;\n  }\n}\n\nmodule.exports = Filter;\n","'use strict'\n\n/**\n * Expose compositor.\n */\n\nmodule.exports = compose\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose (middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n","const Query = require('./query');\nconst Factory = require('async-factory');\nconst connectionFactory = new Factory();\n\nlet sessionNextId = 0;\n\nclass Session {\n  constructor ({ manager }) {\n    this.id = `session-${sessionNextId++}`;\n    this.manager = manager;\n    this.connections = {};\n  }\n\n  factory (schema, criteria) {\n    return new Query({ session: this, schema, criteria });\n  }\n\n  async acquire (name) {\n    let pool = this.manager.getPool(name);\n\n    if (!this.connections[pool.name]) {\n      let id = `${this.id}-${pool.name}`;\n      this.connections[pool.name] = await connectionFactory.singleton(id, () => pool.acquire());\n\n      await this.connections[pool.name].begin();\n    }\n\n    return this.connections[pool.name];\n  }\n\n  async dispose () {\n    await this.rollback();\n    await Promise.all(Object.keys(this.connections).map(name => {\n      return this.manager.getPool(name).release(this.connections[name]);\n    }));\n\n    this.connections = {};\n  }\n\n  close () {\n    return this.commit();\n  }\n\n  async commit () {\n    await Promise.all(Object.keys(this.connections).map(async name => {\n      let connection = this.connections[name];\n      await connection.commit();\n    }));\n  }\n\n  async rollback () {\n    await Promise.all(Object.keys(this.connections).map(async name => {\n      let connection = this.connections[name];\n      await connection.rollback();\n    }));\n  }\n\n  async begin () {\n    await Promise.all(Object.keys(this.connections).map(async name => {\n      let connection = this.connections[name];\n      await connection.begin();\n    }));\n  }\n\n  async flush () {\n    await this.commit();\n    await this.begin();\n  }\n\n  parseSchema (name) {\n    let connection;\n    let schema;\n    if (Array.isArray(name)) {\n      if (name.length < 2) {\n        throw new Error('Malformed schema name tupple');\n      }\n      [ connection, schema ] = name;\n    } else if (name.indexOf('.') !== -1) {\n      [ connection, schema ] = name.split('.');\n    } else {\n      connection = this.manager.getPool().name;\n      schema = name;\n    }\n\n    let pool = this.manager.getPool(connection);\n    return [ pool.name, pool.getSchema(schema) ];\n  }\n}\n\nmodule.exports = Session;\n","class Space {\n  constructor (fn) {\n    this.fn = fn;\n    this.locks = [];\n    this.done = false;\n  }\n\n  async fetch () {\n    if (!this.done) {\n      await new Promise(async (resolve, reject) => {\n        this.locks.push([ resolve, reject ]);\n\n        if (this.locks.length > 1) {\n          return;\n        }\n\n        try {\n          let { fn } = this;\n          this.value = await fn();\n        } catch (err) {\n          this.error = err;\n        }\n\n        this.done = true;\n        this.locks.splice(0).forEach(([ resolve, reject ]) => {\n          if (this.error) {\n            reject(this.error);\n          } else {\n            resolve(this.value);\n          }\n        });\n      });\n    }\n\n    if (this.error) {\n      throw this.error;\n    }\n\n    return this.value;\n  }\n}\n\nclass Factory {\n  constructor () {\n    this.spaces = new Map();\n  }\n\n  async singleton (key, fn) {\n    fn = fn || key;\n\n    let space;\n    if (this.spaces.has(key)) {\n      space = this.spaces.get(key);\n    } else {\n      space = new Space(fn);\n      this.spaces.set(key, space);\n    }\n\n    return space.fetch(); // return promise\n  }\n}\n\nmodule.exports = Factory;\n","var map = {\n\t\"./are\": 17,\n\t\"./are.js\": 17,\n\t\"./default\": 18,\n\t\"./default.js\": 18,\n\t\"./email\": 19,\n\t\"./email.js\": 19,\n\t\"./enum\": 20,\n\t\"./enum.js\": 20,\n\t\"./exists\": 21,\n\t\"./exists.js\": 21,\n\t\"./notEmpty\": 22,\n\t\"./notEmpty.js\": 22,\n\t\"./required\": 23,\n\t\"./required.js\": 23,\n\t\"./requiredIf\": 24,\n\t\"./requiredIf.js\": 24,\n\t\"./unique\": 25,\n\t\"./unique.js\": 25\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 46;","module.exports = {\n  NBoolean: require('./nboolean'),\n  NDatetime: require('./ndatetime'),\n  NDouble: require('./ndouble'),\n  NField: require('./nfield'),\n  NInteger: require('./ninteger'),\n  NReference: require('./nreference'),\n  NString: require('./nstring'),\n  NList: require('./nlist'),\n  NMap: require('./nmap'),\n  NEnum: require('./nenum'),\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NBoolean extends NField {\n  attach (value) {\n    if (value === 'false' || value === '0' || value === '') {\n      return false;\n    }\n\n    return Boolean(value);\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NDatetime extends NField {\n  attach (value) {\n    let date = new Date(value);\n    if (!isNaN(date.getTime())) {\n      return date;\n    }\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NDouble extends NField {\n  attach (value) {\n    return parseFloat(value);\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NInteger extends NField {\n  attach (value) {\n    return parseInt(value, 10);\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NReference extends NField {\n  to (to) {\n    this.to = to;\n\n    return this;\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NString extends NField {\n\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NList extends NField {\n  of (childField) {\n    this.childField = childField;\n\n    return this;\n  }\n\n  attach (value) {\n    if (!value) {\n      return;\n    }\n\n    if (typeof value === 'string') {\n      try {\n        value = JSON.parse(value);\n      } catch (err) {\n        return;\n      }\n    }\n\n    if (!Array.isArray(value)) {\n      return;\n    }\n\n    if (this.childField) {\n      value = value.map(o => this.childField.attach(o));\n    }\n\n    return value;\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NMap extends NField {\n  attach (value) {\n    if (!value) {\n      return;\n    }\n\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (err) {\n        return;\n      }\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        return;\n      }\n\n      return value;\n    }\n  }\n};\n","const NField = require('./nfield');\n\nmodule.exports = class NEnum extends NField {\n  constructor (name) {\n    super(name);\n\n    this.enumTo = [];\n  }\n\n  to (enumTo) {\n    this.enumTo = enumTo;\n\n    return this;\n  }\n\n  attach (value) {\n    if (!value) {\n      return;\n    }\n\n    return this.enumTo.find(v => v === value);\n  }\n};\n"],"sourceRoot":""}